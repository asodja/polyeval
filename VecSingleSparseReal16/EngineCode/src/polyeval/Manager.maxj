package polyeval;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class Manager extends CustomManager {

	static final int FRAGMENTS = 16;

	static final int VEC_SIZE = 16;

    public Manager(EngineParameters engineParams) {
        super(engineParams);
        KernelBlock multiplyKernel = addKernel(new MultiplyKernel(makeKernelParameters("MultiplyKernel"), FRAGMENTS, VEC_SIZE));
        KernelBlock sumKernel = addKernel(new SumKernel(makeKernelParameters("SumKernel"), FRAGMENTS));

        // Set inputs
        multiplyKernel.getInput("constants") <== addStreamFromCPU("constants");
        multiplyKernel.getInput("exponents") <== addStreamFromCPU("exponents");
        sumKernel.getInput("summands") <== multiplyKernel.getOutput("result");

        // Output to CPU
        addStreamToCPU("result") <== sumKernel.getOutput("result");
    }

    private static EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam x = ei.addParam("x", CPUTypes.FLOAT);
        InterfaceParam n = ei.addParam("n", CPUTypes.UINT32);

        ei.setScalar("MultiplyKernel", "n", n);
        ei.setScalar("MultiplyKernel", "x", x);
        ei.setStream("constants", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("exponents", CPUTypes.UINT32, n * CPUTypes.UINT32.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, 4 * CPUTypes.FLOAT.sizeInBytes());

        // Set ticks
        ei.setTicks("MultiplyKernel", n / VEC_SIZE);
        ei.setTicks("SumKernel", FRAGMENTS);

        return ei;
    }

    public static void main(String[] args) {
        EngineParameters params = new EngineParameters(args);
        Manager manager = new Manager(params);
        manager.createSLiCinterface(getEngineInterface());
        manager.build();
    }

}
