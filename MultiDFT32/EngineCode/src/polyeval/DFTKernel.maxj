package polyeval;

import maxpower.kernel.arithmetic.FloatingPointMultiAdder;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class DFTKernel extends Kernel {

    static final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEComplexType CPLX_FLOAT = new DFEComplexType(FLOAT);

    static final DFEType UINT_32 = dfeUInt(32);

    static final DFEType UINT_16 = dfeUInt(16);

    static final DFEType UINT_63 = dfeUInt(63);

	DFTKernel(KernelParameters parameters,
			int latency,
			int maxPolynomialLength,
			int tileSize) {
        super(parameters);
        DFEVectorType<DFEComplex> complexVector = new DFEVectorType<DFEComplex>(CPLX_FLOAT, tileSize);
        int xsMemDepth = maxPolynomialLength * 2 / tileSize;
    	DFEType addrType = dfeUInt(MathUtils.bitsToAddress(xsMemDepth));
    	DFEType esAddrType = dfeUInt(MathUtils.bitsToAddress(maxPolynomialLength));

        // n - size of DFT
        DFEVar nPerDFT = io.scalarInput("n", UINT_32);
        // m - number of DFTs
        DFEVar nDFTs = io.scalarInput("m", UINT_32);
        DFEVar nPoints = nPerDFT * nDFTs;
        DFEVar tickCount = control.count.simpleCounter(63);
        DFEVar initStream = tickCount < nPerDFT.cast(UINT_63);

        // Main loop counter, first read n xs and do nothing
        // Number of iterations per one in dynamic loop
        optimization.pushRoundingMode(RoundingMode.TRUNCATE);
        DFEVar js = (nPerDFT - 1 + latency) / latency;
        DFEVar is = (nPerDFT - 1 + tileSize) / tileSize;
        optimization.popRoundingMode();
        CounterChain cc = control.count.makeCounterChain(~initStream);
        DFEVar parity = cc.addCounter(2, 1);
        DFEVar j = cc.addCounter(js, 1);
        DFEVar i = cc.addCounter(is, 1);
        DFEVar l = cc.addCounter(latency, 1);

        Counter currentDFTTickCounter = getCurrentDFTTickCounter(l === 0 & i === 0 & j === 0);
        DFEVar currentDFTTick = initStream ? tickCount.cast(UINT_32) : currentDFTTickCounter.getCount();

        // Start reading only when
        // we evaluate first iteration
        DFEVar readXs = (currentDFTTick < nPerDFT);
        DFEVar readEs = (currentDFTTick < nPerDFT) & initStream;
        // Counter to control how many xs we have read
        Counter xCounter = getXCounter(nPoints, readXs);
        // Since Main loop starts when first n xs are read,
        // read and write addresses are switched
        DFEVar readAddress = (parity === 0) ? constant.zero(UINT_32) : constant.var(UINT_32, xsMemDepth / 2);
        DFEVar writeAddress = (initStream | parity === 1) ? constant.zero(UINT_32) : constant.var(UINT_32, xsMemDepth / 2);

        // Read and write xs into mem until all are read
        DFEComplex xIn = io.input("xs", CPLX_FLOAT, readXs & xCounter.getCount() < nPoints);
    	Memory<DFEVector<DFEComplex>> xBuf = mem.alloc(complexVector, xsMemDepth);
    	DFEVector<DFEComplex> xs = readVector(xIn, currentDFTTick, nPerDFT, tileSize);
    	DFEVar writeXs = readXs & xCounter.getCount() < nPoints & KernelMath.modulo(currentDFTTick, tileSize) === 0;
    	xBuf.write((writeAddress + integerDivision(currentDFTTick, tileSize)).cast(addrType), xs, writeXs);
        DFEComplex eIn = io.input("es", CPLX_FLOAT, readEs);
    	Memory<DFEComplex> eBuf = mem.alloc(CPLX_FLOAT, maxPolynomialLength);
    	eBuf.write(tickCount.cast(esAddrType), eIn, readEs);

    	DFEVar initLoop = (i === 0);
    	DFEVar n = i.cast(UINT_16) * tileSize;
        DFEVar k = j.cast(UINT_16) * latency + l.cast(UINT_16);
    	DFEVar memReadOffset = (readAddress + i);
    	DFEComplex previousSum = CPLX_FLOAT.newInstance(this);
    	DFEVector<DFEComplex> x = xBuf.read(memReadOffset.cast(addrType));
    	DFEVector<DFEComplex> exponents = getExponents(eBuf, n, k, nPerDFT, memReadOffset, esAddrType, tileSize);
    	DFEVector<DFEComplex> summands = x * exponents;
        DFEComplex sum = FloatingPointMultiAdder.add(summands.getElementsAsList());
        DFEComplex result = initLoop ? sum : sum + previousSum;
        previousSum <== stream.offset(result, -latency);

        // Output
        DFEVar out = ~initStream & (i === is - 1);
        io.output("result", result, CPLX_FLOAT, out);
    }

	private DFEVector<DFEComplex> getExponents(Memory<DFEComplex> eBuf, DFEVar n, DFEVar k, DFEVar nPerDFT, DFEVar memReadOffset, DFEType esAddrType, int tileSize) {
    	DFEVar nPerDFTUInt16 = nPerDFT.cast(UINT_16);
        DFEVar kAddress = mod(n * k, nPerDFTUInt16);
        DFEComplex[] exponents = new DFEComplex[tileSize];
        for (int t = 0; t < tileSize; t++) {
        	// Poor man's modulo
        	kAddress = kAddress >= nPerDFTUInt16 ? (kAddress - nPerDFTUInt16) : kAddress;
        	DFEComplex e = eBuf.read(kAddress.cast(esAddrType));
        	kAddress = kAddress + k;
        	exponents[t] = e;
        }
        return DFEVectorType.newInstance(exponents);
	}

	private DFEVar mod(DFEVar v, DFEVar m) {
        optimization.pushRoundingMode(RoundingMode.TRUNCATE);
        DFEVar div = v / m;
        optimization.popRoundingMode();
		return v - m * div;
	}

	private Counter getXCounter(DFEVar nPoints, DFEVar enable) {
        return control.count.makeCounter(control.count.makeParams(32)
        		.withMax(nPoints)
    			.withEnable(enable)
    			.withWrapMode(WrapMode.STOP_AT_MAX));
	}

	private DFEVector<DFEComplex> readVector(DFEComplex xIn, DFEVar currentDFTTick, DFEVar nPerDFT, int tileSize) {
		DFEComplex[] xs = new DFEComplex[tileSize];
 		for (int i = 0; i < tileSize; i++) {
 			xs[i] = (currentDFTTick + i < nPerDFT) ? stream.offset(xIn, i) : constant.cplx(CPLX_FLOAT, 0, 0);
		}
 		return DFEVectorType.newInstance(xs);
	}

	private Counter getCurrentDFTTickCounter(DFEVar reset) {
        return control.count.makeCounter(control.count.makeParams(32)
        		.withMax(Integer.MAX_VALUE)
    			.withReset(reset)
    			.withWrapMode(WrapMode.STOP_AT_MAX));
	}

	private DFEVar integerDivision(DFEVar value, int divider) {
        optimization.pushRoundingMode(RoundingMode.TRUNCATE);
        DFEVar result = value / divider;
        optimization.popRoundingMode();
        return result;
	}

}
