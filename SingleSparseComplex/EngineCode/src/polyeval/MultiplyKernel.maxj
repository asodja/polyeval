package polyeval;


import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;

public class MultiplyKernel extends Kernel {

    static final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEType UINT_32 = dfeUInt(32);

    static final DFEComplexType COMPLEX_FLOAT = new DFEComplexType(FLOAT);

    MultiplyKernel(KernelParameters parameters, int fragments) {
        super(parameters);

        // Counters
        DFEVar counter = control.count.simpleCounter(32);
        DFEVar n = io.scalarInput("n", UINT_32);
        DFEComplex k = io.input("constants", COMPLEX_FLOAT);
        DFEVar xReal = io.scalarInput("xReal", FLOAT);
        DFEVar xImg = io.scalarInput("xImg", FLOAT);
        DFEComplex x = DFEComplexType.newInstance(this, xReal, xImg);

        // Calculate pow(x)
        DFEVar exp = io.input("exponents", UINT_32);
        DFEComplex powX = constant.cplx(COMPLEX_FLOAT, 1.0, 0.0);
        // Calculate max exponent of 2^10 = 1024,
        // this means we can do x^1024 at max
        for (int i = 0; i < 10; ++i) {
        	powX = ((exp > 0) & ((exp & 1) === 1)) ? powX * x : powX;
        	exp = exp >> 1;
        	x = x * x;
        }

        // Calculate k * pow(x)
        DFEComplex multiply = k * powX;

        // Do sum
        DFEComplex partialSum = COMPLEX_FLOAT.newInstance(this);
        DFEComplex sum = (counter < fragments) ? 0.0 : partialSum;
        sum += multiply;
        partialSum <== stream.offset(sum, -fragments);

        // Output
        io.output("result", sum, COMPLEX_FLOAT, counter >= (n - fragments));

    }

}
