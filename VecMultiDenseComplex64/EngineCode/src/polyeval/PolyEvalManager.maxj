package polyeval;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.IOType;

class PolyEvalManager {

	static final int LATENCY = 48;

	static final int XS_PER_TICK_SIZE = 64;

	static final int MAX_POLYNOMIAL_LENGTH = 8192;

    public static void main(String[] args) {
        EngineParameters params = new EngineParameters(args);
        Manager manager = new Manager(params);
        // Instantiate the kernel
        Kernel kernel = new VecMultiDenseKernel(manager.makeKernelParameters(), LATENCY, MAX_POLYNOMIAL_LENGTH, XS_PER_TICK_SIZE);

        manager.setKernel(kernel);
        manager.setIO(IOType.ALL_CPU); // Connect all kernel ports to
        manager.createSLiCinterface(getEngineInterface(kernel));
        manager.build();
    }

    private static EngineInterface getEngineInterface(Kernel kernel) {
        EngineInterface ei = new EngineInterface();

        // n is length of polynomial, m is number of xs
        InterfaceParam n = ei.addParam("n", CPUTypes.UINT64);
        InterfaceParam m = ei.addParam("m", CPUTypes.UINT64);
        InterfaceParam tickM = ei.addParam("tick_m", CPUTypes.UINT64);
        ei.setScalar(kernel.getName(), "n", n);
        ei.setScalar(kernel.getName(), "m", m);

        ei.setStream("coefficients", CPUTypes.FLOAT, 2 * n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("xs", CPUTypes.FLOAT, 2 * m * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, 2 * m * CPUTypes.FLOAT.sizeInBytes());

        InterfaceParam minTicks = n * XS_PER_TICK_SIZE;
        InterfaceParam calculatedReqTicks = n * tickM / XS_PER_TICK_SIZE;
        InterfaceParam ticks = calculatedReqTicks < minTicks ? minTicks : calculatedReqTicks;
        ei.setTicks(kernel.getName(), ticks);

        return ei;
    }
}
