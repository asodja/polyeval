package polyeval;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class VecMultiDenseKernel extends Kernel {

    static final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEComplexType CMPLX_FLOAT = new DFEComplexType(FLOAT);

    static final DFEType UINT_32 = dfeUInt(32);

    static final DFEType UINT_64 = dfeUInt(64);

	VecMultiDenseKernel(KernelParameters parameters,
			int latency,
			int maxPolynomialLength,
			int xsPerTick) {
        super(parameters);

        // Memory address type DFEUINT(bitsToAddress(maxPolynomialLength)
        DFEFix addressType = dfeUInt(MathUtils.bitsToAddress(maxPolynomialLength));
        DFEVectorType<DFEComplex> floatVec = new DFEVectorType<DFEComplex>(CMPLX_FLOAT, xsPerTick);

        // Input
        // n is length of polynomial, m is number of xs
        DFEVar n = io.scalarInput("n", UINT_64);
        DFEVar m = io.scalarInput("m", UINT_64);
        DFEVar maxCount = m + xsPerTick;

        // We calculate polynomial values first for first "fragments" points,
        // then for next "fragments" points etc. Polynomial is saved in fmem
        // but points cycle in loop with offset of "fragments"
        CounterChain chain = control.count.makeCounterChain();
        DFEVar fragmentIndex = chain.addCounter(m, 1);
        DFEVar polynomialIndex = chain.addCounter(n, 1);
        DFEVar pointIndex = chain.addCounter(latency, 1);
        DFEVar isFirstCoefficient = polynomialIndex === 0;
        DFEVar isLastCoefficient = polynomialIndex === (n - 1);
        DFEVar isFirstFragment = fragmentIndex === 0;
        DFEVar isFirstPoint = pointIndex === 0;
        Counter readXCounter = getReadXCounter(isFirstCoefficient, xsPerTick, maxCount);
        DFEVar isXAvailable = readXCounter.getCount() < m;

        DFEComplex k = io.input("coefficients", CMPLX_FLOAT, isFirstFragment & isFirstPoint);
        DFEVector<DFEComplex> x = io.input("xs", floatVec, isFirstCoefficient & isXAvailable);
        Memory<DFEComplex> kMemory = mem.alloc(CMPLX_FLOAT, maxPolynomialLength);

        // In first loop we save k into fmem
        kMemory.write(polynomialIndex.cast(addressType), k, isFirstFragment & isFirstPoint);
        DFEComplex currentK = isFirstFragment
        		? k
        		: kMemory.read(polynomialIndex.cast(addressType));

        // Loop
        DFEVector<DFEComplex> loopX = floatVec.newInstance(this);
        DFEVector<DFEComplex> result = floatVec.newInstance(this);
        DFEVector<DFEComplex> currentX = isFirstCoefficient ? x : loopX;
        DFEVector<DFEComplex> multiply = isFirstCoefficient
        		? cplxZeroVec(xsPerTick)
        		: currentX * result;
        DFEVector<DFEComplex> currentResult = multiply + currentK;
        loopX <== stream.offset(currentX, -latency);
        result <== stream.offset(currentResult, -latency);

        // Output
        io.output("result", currentResult, floatVec, isLastCoefficient);
    }

    private DFEVector<DFEComplex> cplxZeroVec(int n) {
    	DFEComplex zero = constant.cplx(CMPLX_FLOAT, 0.0f, 0.0f);
    	List<DFEComplex> cplx = new ArrayList<DFEComplex>();
    	for (int i = 0; i < n; i++) {
    		cplx.add(zero);
    	}
    	return DFEVectorType.newInstance(cplx);
    }

    private Counter getReadXCounter(DFEVar enable, int xsPerTick, DFEVar max) {
    	return control.count.makeCounter(control.count.makeParams(64)
    			.withEnable(enable)
    			.withMax(max)
    			.withInc(xsPerTick)
    			.withWrapMode(WrapMode.STOP_AT_MAX));
    }

}
