package polyeval;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class ExponentsKernel extends PolyKernel {

    final DFEType scalarType = dfeFloat(8, 24);

    ExponentsKernel(KernelParameters parameters) {
        super(parameters);

        // Counters
        OffsetExpr loop = stream.makeOffsetAutoLoop("loop");
        DFEVar maxExponents = io.scalarInput("maxExponents",  dfeUInt(32));
        DFEVar loopLength = loop.getDFEVar(this, dfeUInt(8));
        CounterChain chain = control.count.makeCounterChain();
        DFEVar inputIndex = chain.addCounter(maxExponents, 1);
        DFEVar loopIndex = chain.addCounter(loopLength, 1);

        // Input
        DFEVar x = io.scalarInput("x", scalarType);
        DFEVar carriedSum = scalarType.newInstance(this);
        DFEVar sum = (inputIndex === 0) ? 1.0 : carriedSum * x;
        carriedSum <== stream.offset(sum, -loop);

        // Output
        io.output("result", sum, scalarType, loopIndex === loopLength - 1);
    }

    @Override
    public EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam maxExponents = ei.addParam("maxExponents", CPUTypes.UINT32);
        InterfaceParam x = ei.addParam("x", CPUTypes.FLOAT);
        InterfaceParam loopOffset = ei.getAutoLoopOffset(getName(), "loop");
        ei.ignoreAutoLoopOffset(getName(), "loop");

        ei.setScalar(getName(), "maxExponents", maxExponents);
        ei.setScalar(getName(), "x", x);
        ei.setStream("result", CPUTypes.FLOAT, maxExponents * CPUTypes.FLOAT.sizeInBytes());

        ei.setTicks(getName(), maxExponents * loopOffset);

        return ei;
    }
}
