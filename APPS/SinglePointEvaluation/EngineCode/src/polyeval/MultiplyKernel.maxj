package polyeval;


import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class MultiplyKernel extends Kernel {

    final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEType UINT_32 = dfeUInt(32);

    MultiplyKernel(KernelParameters parameters, int fragments) {
        super(parameters);

        // Counters
        DFEVar counter = control.count.simpleCounter(32);
        DFEVar n = io.scalarInput("n", UINT_32);
        DFEVar k = io.input("constants", FLOAT);
        DFEVar x = io.scalarInput("x", FLOAT);

        // Calculate pow(x)
        DFEVar exp = io.input("exponents", dfeUInt(32));
        DFEVar powX = constant.var(FLOAT, 1.0);
        for (int i = 0; i < 10; ++i) {
        	powX = ((exp > 0) & ((exp & 1) === 1)) ? powX * x : powX;
        	exp = exp >> 1;
        	x = x * x;
        }

        // Calculate k * pow(x)
        DFEVar multiply = k * powX;

        // Do sum
        DFEVar partialSum = FLOAT.newInstance(this);
        DFEVar sum = (counter === 0) ? 0.0 : partialSum;
        sum += multiply;
        partialSum <== stream.offset(sum, -fragments);

        // Output
        io.output("result", sum, FLOAT, counter >= (n - fragments));

    }

}
