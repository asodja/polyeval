package polyeval;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class SumKernel extends PolyKernel {

    final DFEType scalarType = dfeFloat(8, 24);

    SumKernel(KernelParameters parameters) {
        super(parameters);

        // Counters
        OffsetExpr loop = stream.makeOffsetAutoLoop("loop");
        DFEVar loopLength = loop.getDFEVar(this, dfeUInt(8));
        CounterChain chain = control.count.makeCounterChain();
        DFEVar inputIndex = chain.addCounter(8, 1);
        DFEVar loopIndex = chain.addCounter(loopLength, 1);

        // Input
        DFEVar summand = io.input("summands", scalarType, loopIndex === 0);
        DFEVar carriedSum = scalarType.newInstance(this);
        DFEVar sum = (inputIndex === 0) ? 0.0 : carriedSum;
        sum = summand + sum;
        carriedSum <== stream.offset(sum, -loop);

        // Output
        io.output("result", sum, scalarType, loopIndex === loopLength - 1);

    }

    @Override
    public EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam n = ei.addParam("n", CPUTypes.UINT32);
        InterfaceParam loopOffset = ei.getAutoLoopOffset(getName(), "loop");
        ei.ignoreAutoLoopOffset(getName(), "loop");

        ei.setStream("summands", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());

        ei.setTicks(getName(), n * loopOffset);

        return ei;
    }
}
