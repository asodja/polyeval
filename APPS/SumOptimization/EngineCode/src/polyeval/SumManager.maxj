package polyeval;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class SumManager extends CustomManager {

	static final int FRAGMENTS = 16;

	public SumManager(EngineParameters engineParams) {
		super(engineParams);
	    KernelBlock partialSumKernel = addKernel(new PartialSumKernel(makeKernelParameters("PartialSumKernel"), FRAGMENTS));
	    KernelBlock fullSumKernel = addKernel(new FullSumKernel(makeKernelParameters("FullSumKernel"), FRAGMENTS));

	    partialSumKernel.getInput("summands") <== addStreamFromCPU("summands");
	    fullSumKernel.getInput("summands") <== partialSumKernel.getOutput("result");

	    addStreamToCPU("result") <== fullSumKernel.getOutput("result");
	}

    public static void main(String[] args) {
        EngineParameters params = new EngineParameters(args);
        CustomManager manager = new SumManager(params);
        manager.createSLiCinterface(getEngineInterface());
        manager.build();
    }

    private static EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam n = ei.addParam("n", CPUTypes.UINT32);

        ei.setScalar("PartialSumKernel", "n", n);
        ei.setStream("summands", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, 4 * CPUTypes.FLOAT.sizeInBytes());

        // Kernel 1
        ei.setTicks("PartialSumKernel", n);

        // Kernel 2
        ei.setTicks("FullSumKernel", FRAGMENTS);

        return ei;
    }
}