package polyeval;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.arithmetic.FloatingPointMultiAdder;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class VecMultiDenseComplexKernel extends Kernel {

    static final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEComplexType COMPLEX_FLOAT = new DFEComplexType(FLOAT);

    static final DFEType UINT_32 = dfeUInt(32);

    static final DFEType UINT_63 = dfeUInt(63);

	VecMultiDenseComplexKernel(KernelParameters parameters,
			int latency,
			int maxPolynomialLength,
			int tileSize,
			int xsPerTick) {
        super(parameters);

        DFEVectorType<DFEComplex> kInType = new DFEVectorType<DFEComplex>(COMPLEX_FLOAT, 2);
        DFEVectorType<DFEComplex> vecType = new DFEVectorType<DFEComplex>(COMPLEX_FLOAT, xsPerTick);
        DFEVectorType<DFEVector<DFEComplex>> resultType = new DFEVectorType<DFEVector<DFEComplex>>(vecType, tileSize);
        DFEFix addressType = dfeUInt(MathUtils.bitsToAddress(maxPolynomialLength));
        DFEVar n = io.scalarInput("n", UINT_32) / 2;
        DFEVar m = io.scalarInput("m", UINT_32);
        DFEVar tickCount = control.count.simpleCounter(32);

        // First n ticks we write coefficients in memory
        DFEVar readAndWriteKs = (tickCount < n);

        // Counters to get correct coefficient from memory,
        // In one latency loop same "k" is fetched from memory
        CounterChain kChain = control.count.makeCounterChain(~readAndWriteKs);
        DFEVar kCounter = kChain.addCounter(n, tileSize);
        kChain.addCounter(latency, 1);

        // ReadXFromStream flag, we read xs when on
        // first coefficient and if it is not readWriteKMode
        DFEVar readXFromStream = kCounter === 0 & ~readAndWriteKs;
        // Count read xs, so we know when to stop stream
        Counter xCounter = getXCounter(readXFromStream);

        DFEVector<DFEComplex> xIn = io.input("xs", vecType, readXFromStream & xCounter.getCount() < m / xsPerTick);
        DFEVector<DFEComplex> kIn = io.input("coefficients", kInType, readAndWriteKs);
    	Memory<DFEVector<DFEComplex>> kBuf = mem.alloc(kInType, maxPolynomialLength);
    	kBuf.write(tickCount.cast(addressType), kIn, readAndWriteKs);

    	DFEVar initLoop = (kCounter === 0);
    	DFEVector<DFEComplex> loopX = vecType.newInstance(this);
    	DFEVector<DFEComplex> loopPows = vecType.newInstance(this);
    	DFEVector<DFEComplex> currentX = initLoop ? xIn : loopX;
    	DFEVector<DFEVector<DFEComplex>> result = resultType.newInstance(this);
    	@SuppressWarnings("unchecked")
    	DFEVector<DFEComplex>[] summands = new DFEVector[tileSize];
        DFEVector<DFEComplex>[] pows = getNextPows(tileSize, xsPerTick, currentX, initLoop, loopPows);
        for (int t = 0; t < tileSize; t++) {
        	DFEVar address = (kCounter + t).cast(addressType);
        	DFEVector<DFEComplex> k = kBuf.read(address);
        	DFEComplex k1 = k[0];
        	DFEComplex k2 = k[1];
        	DFEVector<DFEComplex> inter = (k1 + k2 * currentX) * pows[t];
        	DFEVector<DFEComplex> previousResult = initLoop ? cplxZero(xsPerTick) : result.get(t);
        	summands[t] = previousResult + inter;
        }
        loopPows <== stream.offset(pows[tileSize - 1], -latency);
    	loopX <== stream.offset(currentX, -latency);
    	result <== stream.offset(DFEVectorType.newInstance(summands), -latency);

        // Output
        io.output("result", FloatingPointMultiAdder.add(summands), vecType, ~readAndWriteKs & kCounter >= (n - tileSize));
    }

    private DFEVector<DFEComplex>[] getNextPows(
    		int tileSize,
    		int xsPerTick,
    		DFEVector<DFEComplex> x,
    		DFEVar initLoop,
    		DFEVector<DFEComplex> loopPows) {
    	@SuppressWarnings("unchecked")
		DFEVector<DFEComplex>[] pows = new DFEVector[tileSize];
    	DFEVector<DFEComplex> pow = initLoop ? cplxOne(xsPerTick) : loopPows;
    	DFEVector<DFEComplex> xSquare = x * x;
    	pows[0] = initLoop ? pow : pow * xSquare;
    	for (int i = 1; i < tileSize; i++) {
        	// Powers are all even, x^2, x^4, x^6 etc...
    		// Also are calculated from previous one
    		pows[i] = pows[i - 1] * xSquare;
    	}
    	return pows;
    }

    private Counter getXCounter(DFEVar enable) {
    	return control.count.makeCounter(control.count.makeParams(32)
    			.withEnable(enable)
    			.withWrapMode(WrapMode.STOP_AT_MAX));
    }

    private DFEVector<DFEComplex> cplxZero(int n) {
    	return cplxVec(n, 0.0, 0.0);
    }

    private DFEVector<DFEComplex> cplxOne(int n) {
    	return cplxVec(n, 1.0, 0.0);
    }

    private DFEVector<DFEComplex> cplxVec(int n, double real, double img) {
    	DFEComplex one = constant.cplx(COMPLEX_FLOAT, real, img);
    	List<DFEComplex> cplx = new ArrayList<DFEComplex>();
    	for (int i = 0; i < n; i++) {
    		cplx.add(one);
    	}
    	return DFEVectorType.newInstance(cplx);
    }

}
