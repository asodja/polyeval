#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2016
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46754
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2016-06-10"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "PolyEval"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/PolyEval_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20170125
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 42)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PolyEvalKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(PolyEvalKernel, Kernel)
MANAGER_NODE(constants, PCIe_From_Host)
MANAGER_NODE(exponentValues, PCIe_From_Host)
MANAGER_NODE(exponents, PCIe_From_Host)
MANAGER_NODE(result, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_7, DualAspectMux)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_12, DualAspectReg)
MANAGER_NODE(Stream_28, StreamPullPushAdapter)
MANAGER_NODE(Stream_14, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_18, Fifo)
MANAGER_NODE(Stream_16, Fifo)
MANAGER_NODE(Stream_20, Fifo)
MANAGER_NODE(Stream_24, Fifo)
MANAGER_NODE(Stream_26, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(PolyEvalKernel, constants, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, exponents, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, exponentValues, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(constants, constants, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(exponentValues, exponentValues, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(exponents, exponents, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(result, result, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_7, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_7, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_4, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_12, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_28, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_28, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_22, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_18, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_18, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_16, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_20, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_20, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_24, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_24, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_26, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_26, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(constants, constants, Stream_14, input, 128)
MANAGER_STREAM(exponentValues, exponentValues, Stream_22, input, 128)
MANAGER_STREAM(exponents, exponents, Stream_18, input, 128)
MANAGER_STREAM(PolyEvalKernel, result, Stream_26, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_16, input, 32)
MANAGER_STREAM(Stream_7, output, Stream_20, input, 32)
MANAGER_STREAM(Stream_4, output, Stream_24, input, 32)
MANAGER_STREAM(Stream_12, output, Stream_28, input, 128)
MANAGER_STREAM(Stream_28, output, result, result, 128)
MANAGER_STREAM(Stream_14, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_22, output, Stream_4, input, 128)
MANAGER_STREAM(Stream_18, output, Stream_7, input, 128)
MANAGER_STREAM(Stream_16, output, PolyEvalKernel, constants, 32)
MANAGER_STREAM(Stream_20, output, PolyEvalKernel, exponents, 32)
MANAGER_STREAM(Stream_24, output, PolyEvalKernel, exponentValues, 32)
MANAGER_STREAM(Stream_26, output, Stream_12, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(PolyEvalKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(constants, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(exponentValues, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(exponents, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(result, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_7, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_18, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_20, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_24, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_26, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PolyEvalKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PolyEvalKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PolyEvalKernel, PolyEvalKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(PolyEvalKernel, constants, 0)
DEBUG_INPUT_BITS(PolyEvalKernel, exponents, 1)
DEBUG_INPUT_BITS(PolyEvalKernel, exponentValues, 2)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PolyEvalKernel, result, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(constants, PCIePushSourceSyncMax4, "constants")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(exponentValues, PCIePushSourceSyncMax4, "exponentValues")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(exponents, PCIePushSourceSyncMax4, "exponents")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, FifoPushToPullSync, "Stream_14", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_18, FifoPushToPullSync, "Stream_18", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_7, DualAspectMuxSync, "Stream_7", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, FifoPushToPullSync, "Stream_16", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, FifoPushToPullSync, "Stream_24", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, FifoPushToPullSync, "Stream_20", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PolyEvalKernel, PolyEvalKernel, "PolyEvalKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_26, FifoPushToPullSync, "Stream_26", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, DualAspectRegSync, "Stream_12", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, PullToPushAdapterSync, "Stream_28")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(result, PCIePushSinkSyncMax3, "result")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 3, 1, 0, 0, 0, 0, 0, 42)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "e28adf9cfe043a56d18587b36f08fe71d0eedec3e0cfca2e5e122862401ae318")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_done, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_request, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_fill_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_full_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(constants, STREAM_FROM_HOST, 0)
PCIE_STREAM(exponentValues, STREAM_FROM_HOST, 1)
PCIE_STREAM(exponents, STREAM_FROM_HOST, 2)
PCIE_STREAM(result, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(PolyEvalKernel.io_constants_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_exponents_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_exponentValues_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_result_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.run_cycle_count, 0x4, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.current_run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.dbg_ctld_almost_empty, 0x10, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_done, 0x11, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_empty, 0x12, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_read, 0x13, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x14, 2, hwBits(9))
REG(PolyEvalKernel.dbg_ctld_request, 0x16, 1, hwBits(3))
REG(PolyEvalKernel.dbg_done_out, 0x17, 1, hwBits(1))
REG(PolyEvalKernel.dbg_fill_level, 0x18, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flush_level, 0x1a, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flush_start, 0x1c, 1, hwBits(1))
REG(PolyEvalKernel.dbg_flush_start_level, 0x1d, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flushing, 0x1f, 1, hwBits(1))
REG(PolyEvalKernel.dbg_full_level, 0x20, 2, hwBits(10))
REG(PolyEvalKernel.dbg_out_stall, 0x22, 1, hwBits(1))
REG(PolyEvalKernel.dbg_out_valid, 0x23, 1, hwBits(1))
REG(PolyEvalKernel.dbg_stall_vector, 0x24, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x25, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x26, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(PolyEvalKernel.io_constants_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_exponents_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_exponentValues_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_result_force_disabled, 0x3, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.run_cycle_count, 0x4, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolyEvalKernel.current_run_cycle_count, 0xa, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_almost_empty, 0x10, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_done, 0x11, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_empty, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read, 0x13, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x14, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_request, 0x16, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_done_out, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_fill_level, 0x18, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_level, 0x1a, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start_level, 0x1d, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flushing, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_full_level, 0x20, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_stall, 0x22, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_valid, 0x23, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_stall_vector, 0x24, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x25, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x26, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("e28adf9cfe043a56d18587b36f08fe71d0eedec3e0cfca2e5e122862401ae318")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME PolyEval
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_PolyEval_H
#define SLIC_DECLARATIONS_PolyEval_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define PolyEval_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_maxExponents Interface Parameter "maxExponents".
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_constants The stream should be of size (param_n * 4) bytes.
 * \param [in] instream_exponentValues The stream should be of size (param_maxExponents * 4) bytes.
 * \param [in] instream_exponents The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 */
void PolyEval(
	int64_t param_maxExponents,
	int64_t param_n,
	const float *instream_constants,
	const float *instream_exponentValues,
	const int32_t *instream_exponents,
	float *outstream_result);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_maxExponents Interface Parameter "maxExponents".
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_constants The stream should be of size (param_n * 4) bytes.
 * \param [in] instream_exponentValues The stream should be of size (param_maxExponents * 4) bytes.
 * \param [in] instream_exponents The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *PolyEval_nonblock(
	int64_t param_maxExponents,
	int64_t param_n,
	const float *instream_constants,
	const float *instream_exponentValues,
	const int32_t *instream_exponents,
	float *outstream_result);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int64_t param_maxExponents; /**<  [in] Interface Parameter "maxExponents". */
	int64_t param_n; /**<  [in] Interface Parameter "n". */
	const float *instream_constants; /**<  [in] The stream should be of size (param_n * 4) bytes. */
	const float *instream_exponentValues; /**<  [in] The stream should be of size (param_maxExponents * 4) bytes. */
	const int32_t *instream_exponents; /**<  [in] The stream should be of size (param_n * 4) bytes. */
	float *outstream_result; /**<  [out] The stream should be of size (param_n * 4) bytes. */
} PolyEval_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* PolyEval_init(void);

/* Error handling functions */
int PolyEval_has_errors(void);
const char* PolyEval_get_errors(void);
void PolyEval_clear_errors(void);
/* Free statically allocated maxfile data */
void PolyEval_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_PolyEval_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PolyEvalKernel, 19, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 3, NodeInputMappedReg, "Scalar input (io_constants_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 4, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 5, NodeInput, "Input(constants)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 9, NodeInputMappedReg, "Scalar input (io_exponentValues_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 10, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 11, NodeInput, "Input(exponentValues)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 6, NodeInputMappedReg, "Scalar input (io_exponents_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 7, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 8, NodeInput, "Input(exponents)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 40, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 1, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 2, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 36, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 15, NodeStreamOffset, "stream offset: -1000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:517)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 16, NodeDynamicStreamOffset, "dynamic offset: [0, 1000]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:517)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 17, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:25)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 22, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:23)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 27, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 39, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 24, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 25, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 26, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 28, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 38, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 30, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 31, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 33, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 37, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 32, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int PolyEval_has_errors(void)
{	return stored_has_error; }
const char* PolyEval_get_errors(void)
{	return stored_error; }
void PolyEval_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char PolyEval_use_simulation[16];
static void PolyEval_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(PolyEval_use_simulation, 16, "PolyEval_%05ld_", pid);
}
static const char *PolyEval_check_use_simulation(void)
{
	PolyEval_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = PolyEval_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int PolyEval_simulation_launch = 0;
int PolyEval_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int PolyEval_simulator_stop(void)
{
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void PolyEval_static_init(void) 
{
	stored_maxfile = PolyEval_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = PolyEval_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = PolyEval_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			PolyEval_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void PolyEval_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (PolyEval_simulation_launch == 1) {
		int sim_stat = PolyEval_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		PolyEval_simulation_launch = 0;
	}
}

static int PolyEval_get_pcie_alignment(void)
{
#ifdef PolyEval_PCIE_ALIGNMENT
	return ((PolyEval_PCIE_ALIGNMENT < 1) ? 16 : PolyEval_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int PolyEval_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = PolyEval_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *PolyEval_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = PolyEval_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct PolyEval_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} PolyEval_callback_stream_t;

typedef struct PolyEval_callback_data {
	PolyEval_callback_stream_t stream[4]; 
	int count;
	int max_count;
} PolyEval_callback_data_t;

static void PolyEval_callback_internal(void *cb_data)
{
	PolyEval_callback_data_t *data = (PolyEval_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		PolyEval_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* PolyEval_convert_internal(
	max_file_t *maxfile,
	PolyEval_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	PolyEval_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(PolyEval_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function PolyEval_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 4;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &PolyEval_callback_internal;
	}

	int64_t param_n = interface_actions->param_n;
	
	/* code for scalar PolyEvalKernel.run_cycle_count */
	uint64_t ticks_PolyEvalKernel = param_n;
	max_set_ticks(actions, "PolyEvalKernel", param_n);
	CHECK_ERRORS;
	/* end of code for scalar PolyEvalKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_n * 4);
	
	/* code for stream constants */
	size_t instream_size_constants = tmp_0;
	if (instream_size_constants > 0) {
		const float *stream_ptr = interface_actions->instream_constants;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_constants))) {
			float *aligned_instream_constants = malloc(instream_size_constants);
			if (aligned_instream_constants == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'constants'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_constants;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_constants;
			(&cb_data->stream[cb_data->count])->size        = instream_size_constants;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_constants, interface_actions->instream_constants, instream_size_constants);
			stream_ptr = aligned_instream_constants;
		}
		max_queue_input(actions, "constants", stream_ptr, instream_size_constants);
		CHECK_ERRORS;
	}
	/* end of code for stream constants */
	
	int64_t param_maxExponents = interface_actions->param_maxExponents;
	
	int64_t tmp_2 = (param_maxExponents * 4);
	
	/* code for stream exponentValues */
	size_t instream_size_exponentValues = tmp_2;
	if (instream_size_exponentValues > 0) {
		const float *stream_ptr = interface_actions->instream_exponentValues;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_exponentValues))) {
			float *aligned_instream_exponentValues = malloc(instream_size_exponentValues);
			if (aligned_instream_exponentValues == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'exponentValues'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_exponentValues;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_exponentValues;
			(&cb_data->stream[cb_data->count])->size        = instream_size_exponentValues;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_exponentValues, interface_actions->instream_exponentValues, instream_size_exponentValues);
			stream_ptr = aligned_instream_exponentValues;
		}
		max_queue_input(actions, "exponentValues", stream_ptr, instream_size_exponentValues);
		CHECK_ERRORS;
	}
	/* end of code for stream exponentValues */
	
	int64_t tmp_1 = (param_n * 4);
	
	/* code for stream exponents */
	size_t instream_size_exponents = tmp_1;
	if (instream_size_exponents > 0) {
		const int32_t *stream_ptr = interface_actions->instream_exponents;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_exponents))) {
			int32_t *aligned_instream_exponents = malloc(instream_size_exponents);
			if (aligned_instream_exponents == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'exponents'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_exponents;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_exponents;
			(&cb_data->stream[cb_data->count])->size        = instream_size_exponents;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_exponents, interface_actions->instream_exponents, instream_size_exponents);
			stream_ptr = aligned_instream_exponents;
		}
		max_queue_input(actions, "exponents", stream_ptr, instream_size_exponents);
		CHECK_ERRORS;
	}
	/* end of code for stream exponents */
	
	int64_t tmp_3 = (param_n * 4);
	
	/* code for stream result */
	size_t outstream_size_result = tmp_3;
	if (outstream_size_result > 0) {
		float *stream_ptr = interface_actions->outstream_result;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->outstream_result))) {
			float *aligned_outstream_result = malloc(outstream_size_result);
			if (aligned_outstream_result == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'result'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_result;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_result;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_result;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_result;
		}
		max_queue_output(actions, "result", stream_ptr, outstream_size_result);
		CHECK_ERRORS;
	}
	/* end of code for stream result */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void PolyEval(
	int64_t param_maxExponents,
	int64_t param_n,
	const float *instream_constants,
	const float *instream_exponentValues,
	const int32_t *instream_exponents,
	float *outstream_result)
{
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = PolyEval_nonblock(param_maxExponents, param_n, instream_constants, instream_exponentValues, instream_exponents, outstream_result);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_nonblock(
	int64_t param_maxExponents,
	int64_t param_n,
	const float *instream_constants,
	const float *instream_exponentValues,
	const int32_t *instream_exponents,
	float *outstream_result)
{
	PolyEval_actions_t interface_actions;
	interface_actions.param_maxExponents = param_maxExponents;
	interface_actions.param_n = param_n;
	interface_actions.instream_constants = instream_constants;
	interface_actions.instream_exponentValues = instream_exponentValues;
	interface_actions.instream_exponents = instream_exponents;
	interface_actions.outstream_result = outstream_result;
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_run_t *run = PolyEval_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions)
{
	return PolyEval_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int64_t, n, param_n)	
SLIC_SET_TICKS(PolyEvalKernel, param_n)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_n * 4);)	
SLIC_STREAM(constants, tmp_0)	
SLIC_PARAMETER_UINT64(int64_t, maxExponents, param_maxExponents)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_maxExponents * 4);)	
SLIC_STREAM(exponentValues, tmp_2)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_n * 4);)	
SLIC_STREAM(exponents, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_3 = (param_n * 4);)	
SLIC_STREAM(result, tmp_3)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlBvbHlFdmFsLmgiIG5hbWU9
IlBvbHlFdmFsIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9ImxvbmciIHZh
bHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJQb2x5
RXZhbCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7bWF4RXhwb25lbnRzJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFy
YW1fbWF4RXhwb25lbnRzIiB0eXBlPSJpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJJbnRlcmZhY2Ug
UGFyYW1ldGVyICZxdW90O24mcXVvdDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJwYXJhbV9u
IiB0eXBlPSJpbnQ2NF90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNp
emUgKHBhcmFtX24gKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFt
X2NvbnN0YW50cyIgc2l6ZT0iKHBhcmFtX24gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJm
bG9hdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5h
cnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fbiAqIDQpIC8gNCkiPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX24g
KiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fbiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1
ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1l
bnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAo
cGFyYW1fbWF4RXhwb25lbnRzICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJp
bnN0cmVhbV9leHBvbmVudFZhbHVlcyIgc2l6ZT0iKHBhcmFtX21heEV4cG9uZW50cyAqIDQpIiB0
cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3Ro
PjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChw
YXJhbV9tYXhFeHBvbmVudHMgKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVy
YXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9tYXhFeHBvbmVudHMgKiA0KSI+PHVzZXJQ
YXJhbSB2YWx1ZT0icGFyYW1fbWF4RXhwb25lbnRzIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQi
Lz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVl
PSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVu
c2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChw
YXJhbV9uICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9leHBv
bmVudHMiIHNpemU9IihwYXJhbV9uICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iaW50MzJf
dCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlP
cGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fbiAqIDQpIC8gNCkiPjxmdW5jdGlv
bkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX24gKiA0
KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fbiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+
PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0i
NCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNp
b24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFy
YW1fbiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9yZXN1
bHQiIHNpemU9IihwYXJhbV9uICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxk
aW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0
b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX24gKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxs
PjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9uICogNCkiPjx1
c2VyUGFyYW0gdmFsdWU9InBhcmFtX24iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVt
QmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48
L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwv
YXJyYXk+PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBQb2x5RXZhbF9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNfZXJy
b3I7IH0KY29uc3QgY2hhciogUG9seUV2YWxfZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9y
ZWRfZXJyb3I7IH0Kdm9pZCBQb2x5RXZhbF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9y
ZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9
CgpzdGF0aWMgY2hhciBQb2x5RXZhbF91c2Vfc2ltdWxhdGlvblsxNl07CnN0YXRpYyB2b2lkIFBv
bHlFdmFsX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBpZCA9ICgobG9uZykgZ2V0
cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYoUG9seUV2YWxfdXNlX3NpbXVsYXRpb24sIDE2LCAi
UG9seUV2YWxfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqUG9seUV2YWxfY2hl
Y2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJUG9seUV2YWxfZGVmX3VzZV9zaW11bGF0aW9uKCk7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdf
VVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBQb2x5
RXZhbF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19V
U0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGlu
dCBQb2x5RXZhbF9zaW11bGF0aW9uX2xhdW5jaCA9IDA7CmludCBQb2x5RXZhbF9zaW11bGF0b3Jf
c3RhcnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gUG9s
eUV2YWxfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRm
KGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4g
JXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlw
ZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNh
dChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsK
CQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEw
MjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxh
dG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlm
IChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwg
PSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgUG9s
eUV2YWxfc2ltdWxhdG9yX3N0b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFBvbHlF
dmFsX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50Zihi
dWZmLCAxMDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVz
IC1jIE1BWDQ4NDhBIC1TIHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAg
PSBwb3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVm
ZiwgIiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0
X2Vycm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBw
aXBlX2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBj
b21tYW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9Cglw
Y2xvc2UocGlwZV9mcCk7CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgUG9seUV2YWxfc3RhdGlj
X2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gUG9seUV2YWxfaW5pdCgpOwoJaWYgKHN0
b3JlZF9tYXhmaWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkg
ewoJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7
IHNldF9lcnJvcigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFt
YXhfb2sobWF4X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9j
b25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9S
KSkKCQltYXhfZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3Qg
dGltZW91dF9wcmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsK
CWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBQb2x5RXZhbF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJ
aWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWlu
dCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQg
PT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkp
IHsKCQkJUG9seUV2YWxfc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9l
cnJvcigiRXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUg
c2ltdWxhdGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3Io
IkVycm9yOiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBz
ZXQgY29ycmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigi
RXJyb3I6IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlz
IHJ1bm5pbmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xv
YWQoc3RvcmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJy
b3JzKSkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxv
YWQgZW5naW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJv
cnQoKTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShz
dG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUp
OwoJCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2Fk
X3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgUG9seUV2
YWxfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9h
ZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRf
bWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3Rv
cmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJl
ZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoUG9seUV2YWxf
c2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVs
YXRvcl9zdG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
RXJyb3Igc3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlQb2x5RXZhbF9zaW11bGF0aW9uX2xh
dW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgUG9seUV2YWxfZ2V0X3BjaWVfYWxpZ25tZW50KHZv
aWQpCnsKI2lmZGVmIFBvbHlFdmFsX1BDSUVfQUxJR05NRU5UCglyZXR1cm4gKChQb2x5RXZhbF9Q
Q0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBQb2x5RXZhbF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNl
CglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQo
Y29uc3Qgdm9pZCAqZGF0YSkKewoJdWludHB0cl90IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRh
OwoJaW50IGFsaWdubWVudCA9IFBvbHlFdmFsX2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJu
IChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9CgpzdGF0aWMgdm9pZCAqUG9seUV2YWxf
bWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGln
bm1lbnQgPSBQb2x5RXZhbF9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZw
dHIsIGFsaWdubWVudCwgc2l6ZSk7CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAt
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoK
CiNkZWZpbmUgQ0hFQ0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykp
IHsgaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJP
UlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2Uo
U1QtPmVycm9ycykpOyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3Ry
YWNlKFNULT5lcnJvcnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVF
LCBNRVNTQUdFLCBSRVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jv
b2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRm
KHN0ZGVyciwgIiVzXG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVk
X2Vycm9yLCBNRVNTQUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBS
RVQ7IH0KCiAKdHlwZWRlZiBzdHJ1Y3QgUG9seUV2YWxfY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4
X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50
ICAgICAgaXNfb3V0cHV0Owp9IFBvbHlFdmFsX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBz
dHJ1Y3QgUG9seUV2YWxfY2FsbGJhY2tfZGF0YSB7CglQb2x5RXZhbF9jYWxsYmFja19zdHJlYW1f
dCBzdHJlYW1bNF07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBQb2x5RXZhbF9jYWxs
YmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBQb2x5RXZhbF9jYWxsYmFja19pbnRlcm5hbCh2b2lk
ICpjYl9kYXRhKQp7CglQb2x5RXZhbF9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoUG9seUV2YWxf
Y2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNv
dW50IDsgaSsrICkgewoJCVBvbHlFdmFsX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0
cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5
KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxp
Z25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3QqIFBvbHlF
dmFsX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJUG9seUV2YWxfYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQg
KCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9h
Y3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYo
YWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190
cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJUG9seUV2YWxfY2FsbGJh
Y2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJhY2sgPSAoY2FsbGJhY2tf
ZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsKCWlmICh1c2VfY2FsbGJh
Y2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihQb2x5RXZhbF9jYWxsYmFja19kYXRhX3Qp
KTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRv
IGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gUG9s
eUV2YWxfY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRh
LT5tYXhfY291bnQgPSA0OwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2Rh
dGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmUG9seUV2YWxfY2FsbGJh
Y2tfaW50ZXJuYWw7Cgl9CgoJaW50NjRfdCBwYXJhbV9uID0gaW50ZXJmYWNlX2FjdGlvbnMtPnBh
cmFtX247CgkKCS8qIGNvZGUgZm9yIHNjYWxhciBQb2x5RXZhbEtlcm5lbC5ydW5fY3ljbGVfY291
bnQgKi8KCXVpbnQ2NF90IHRpY2tzX1BvbHlFdmFsS2VybmVsID0gcGFyYW1fbjsKCW1heF9zZXRf
dGlja3MoYWN0aW9ucywgIlBvbHlFdmFsS2VybmVsIiwgcGFyYW1fbik7CglDSEVDS19FUlJPUlM7
CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFBvbHlFdmFsS2VybmVsLnJ1bl9jeWNsZV9jb3Vu
dCovCgkKCWludDY0X3QgdG1wXzAgPSAocGFyYW1fbiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJl
YW0gY29uc3RhbnRzICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9jb25zdGFudHMgPSB0bXBfMDsK
CWlmIChpbnN0cmVhbV9zaXplX2NvbnN0YW50cyA+IDApIHsKCQljb25zdCBmbG9hdCAqc3RyZWFt
X3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9jb25zdGFudHM7CgkJaWYgKHVzZV9j
YWxsYmFjayAmJiAoMSA9PSBQb2x5RXZhbF9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25z
LT5pbnN0cmVhbV9jb25zdGFudHMpKSkgewoJCQlmbG9hdCAqYWxpZ25lZF9pbnN0cmVhbV9jb25z
dGFudHMgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9jb25zdGFudHMpOwoJCQlpZiAoYWxpZ25lZF9p
bnN0cmVhbV9jb25zdGFudHMgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFj
dGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2Nh
dGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnY29uc3RhbnRzJyIpOwoJCQkJQ0hFQ0tfRVJS
T1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRy
ICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fY29uc3RhbnRzOwoJ
CQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50
OF90KikgYWxpZ25lZF9pbnN0cmVhbV9jb25zdGFudHM7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2Ni
X2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV9jb25zdGFudHM7CgkJ
CSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJ
Y2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1fY29uc3RhbnRz
LCBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fY29uc3RhbnRzLCBpbnN0cmVhbV9zaXplX2Nv
bnN0YW50cyk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX2NvbnN0YW50czsKCQl9
CgkJbWF4X3F1ZXVlX2lucHV0KGFjdGlvbnMsICJjb25zdGFudHMiLCBzdHJlYW1fcHRyLCBpbnN0
cmVhbV9zaXplX2NvbnN0YW50cyk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUg
Zm9yIHN0cmVhbSBjb25zdGFudHMgKi8KCQoJaW50NjRfdCBwYXJhbV9tYXhFeHBvbmVudHMgPSBp
bnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fbWF4RXhwb25lbnRzOwoJCglpbnQ2NF90IHRtcF8yID0g
KHBhcmFtX21heEV4cG9uZW50cyAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gZXhwb25lbnRW
YWx1ZXMgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX2V4cG9uZW50VmFsdWVzID0gdG1wXzI7Cglp
ZiAoaW5zdHJlYW1fc2l6ZV9leHBvbmVudFZhbHVlcyA+IDApIHsKCQljb25zdCBmbG9hdCAqc3Ry
ZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leHBvbmVudFZhbHVlczsKCQlp
ZiAodXNlX2NhbGxiYWNrICYmICgxID09IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNl
X2FjdGlvbnMtPmluc3RyZWFtX2V4cG9uZW50VmFsdWVzKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRf
aW5zdHJlYW1fZXhwb25lbnRWYWx1ZXMgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9leHBvbmVudFZh
bHVlcyk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2V4cG9uZW50VmFsdWVzID09IE5VTEwpIHsK
CQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJ
TkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0g
J2V4cG9uZW50VmFsdWVzJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZh
Y2VfYWN0aW9ucy0+aW5zdHJlYW1fZXhwb25lbnRWYWx1ZXM7CgkJCSgmY2JfZGF0YS0+c3RyZWFt
W2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3Ry
ZWFtX2V4cG9uZW50VmFsdWVzOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfZXhwb25lbnRWYWx1ZXM7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+
Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1fZXhwb25lbnRWYWx1ZXMsIGlu
dGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leHBvbmVudFZhbHVlcywgaW5zdHJlYW1fc2l6ZV9l
eHBvbmVudFZhbHVlcyk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX2V4cG9uZW50
VmFsdWVzOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImV4cG9uZW50VmFsdWVzIiwg
c3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9leHBvbmVudFZhbHVlcyk7CgkJQ0hFQ0tfRVJST1JT
OwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBleHBvbmVudFZhbHVlcyAqLwoJCglpbnQ2
NF90IHRtcF8xID0gKHBhcmFtX24gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGV4cG9uZW50
cyAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfZXhwb25lbnRzID0gdG1wXzE7CglpZiAoaW5zdHJl
YW1fc2l6ZV9leHBvbmVudHMgPiAwKSB7CgkJY29uc3QgaW50MzJfdCAqc3RyZWFtX3B0ciA9IGlu
dGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leHBvbmVudHM7CgkJaWYgKHVzZV9jYWxsYmFjayAm
JiAoMSA9PSBQb2x5RXZhbF9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVh
bV9leHBvbmVudHMpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX2luc3RyZWFtX2V4cG9uZW50cyA9
IG1hbGxvYyhpbnN0cmVhbV9zaXplX2V4cG9uZW50cyk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFt
X2V4cG9uZW50cyA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+
ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGln
bmVkIG1lbW9yeSBmb3Igc3RyZWFtICdleHBvbmVudHMnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJ
CX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAo
dWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leHBvbmVudHM7CgkJCSgmY2Jf
ZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBh
bGlnbmVkX2luc3RyZWFtX2V4cG9uZW50czsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+
Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2V4cG9uZW50czsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAwOwoJCQljYl9kYXRh
LT5jb3VudCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVhbV9leHBvbmVudHMsIGludGVy
ZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9leHBvbmVudHMsIGluc3RyZWFtX3NpemVfZXhwb25lbnRz
KTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfaW5zdHJlYW1fZXhwb25lbnRzOwoJCX0KCQltYXhf
cXVldWVfaW5wdXQoYWN0aW9ucywgImV4cG9uZW50cyIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3Np
emVfZXhwb25lbnRzKTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3Ry
ZWFtIGV4cG9uZW50cyAqLwoJCglpbnQ2NF90IHRtcF8zID0gKHBhcmFtX24gKiA0KTsKCQoJLyog
Y29kZSBmb3Igc3RyZWFtIHJlc3VsdCAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3Jlc3VsdCA9
IHRtcF8zOwoJaWYgKG91dHN0cmVhbV9zaXplX3Jlc3VsdCA+IDApIHsKCQlmbG9hdCAqc3RyZWFt
X3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0OwoJCWlmICh1c2VfY2Fs
bGJhY2sgJiYgKDEgPT0gUG9seUV2YWxfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+
b3V0c3RyZWFtX3Jlc3VsdCkpKSB7CgkJCWZsb2F0ICphbGlnbmVkX291dHN0cmVhbV9yZXN1bHQg
PSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfcmVzdWx0KTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFt
X3Jlc3VsdCA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJy
b3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVk
IG1lbW9yeSBmb3Igc3RyZWFtICdyZXN1bHQnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhf
dCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0OwoJCQkoJmNiX2RhdGEtPnN0
cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9v
dXRzdHJlYW1fcmVzdWx0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5z
aXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX3Jlc3VsdDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1b
Y2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAx
OwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fcmVzdWx0OwoJCX0KCQltYXhfcXVl
dWVfb3V0cHV0KGFjdGlvbnMsICJyZXN1bHQiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV9y
ZXN1bHQpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gcmVz
dWx0ICovCgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpj
YWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9k
YXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgUG9s
eUV2YWwoCglpbnQ2NF90IHBhcmFtX21heEV4cG9uZW50cywKCWludDY0X3QgcGFyYW1fbiwKCWNv
bnN0IGZsb2F0ICppbnN0cmVhbV9jb25zdGFudHMsCgljb25zdCBmbG9hdCAqaW5zdHJlYW1fZXhw
b25lbnRWYWx1ZXMsCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV9leHBvbmVudHMsCglmbG9hdCAq
b3V0c3RyZWFtX3Jlc3VsdCkKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0
aWFsaXNlZCwgUG9seUV2YWxfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4Zmls
ZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBQb2x5RXZh
bF9ub25ibG9jayhwYXJhbV9tYXhFeHBvbmVudHMsIHBhcmFtX24sIGluc3RyZWFtX2NvbnN0YW50
cywgaW5zdHJlYW1fZXhwb25lbnRWYWx1ZXMsIGluc3RyZWFtX2V4cG9uZW50cywgb3V0c3RyZWFt
X3Jlc3VsdCk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7Cglt
YXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlBvbHlFdmFsX25vbmJsb2NrKAoJaW50NjRfdCBw
YXJhbV9tYXhFeHBvbmVudHMsCglpbnQ2NF90IHBhcmFtX24sCgljb25zdCBmbG9hdCAqaW5zdHJl
YW1fY29uc3RhbnRzLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX2V4cG9uZW50VmFsdWVzLAoJY29u
c3QgaW50MzJfdCAqaW5zdHJlYW1fZXhwb25lbnRzLAoJZmxvYXQgKm91dHN0cmVhbV9yZXN1bHQp
CnsKCVBvbHlFdmFsX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX21heEV4cG9uZW50cyA9IHBhcmFtX21heEV4cG9uZW50czsKCWludGVyZmFjZV9h
Y3Rpb25zLnBhcmFtX24gPSBwYXJhbV9uOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1fY29u
c3RhbnRzID0gaW5zdHJlYW1fY29uc3RhbnRzOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1f
ZXhwb25lbnRWYWx1ZXMgPSBpbnN0cmVhbV9leHBvbmVudFZhbHVlczsKCWludGVyZmFjZV9hY3Rp
b25zLmluc3RyZWFtX2V4cG9uZW50cyA9IGluc3RyZWFtX2V4cG9uZW50czsKCWludGVyZmFjZV9h
Y3Rpb25zLm91dHN0cmVhbV9yZXN1bHQgPSBvdXRzdHJlYW1fcmVzdWx0OwoJKHZvaWQpIHB0aHJl
YWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgUG9seUV2YWxfc3RhdGljX2luaXQpOwoJ
Q0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxM
KTsKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAg
ICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gUG9seUV2YWxfY29udmVydF9pbnRl
cm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNi
X2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBO
VUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAq
cnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3Rv
cmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tf
d2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJP
UlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJu
IHJ1bjsKfQoKdm9pZCBQb2x5RXZhbF9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVBvbHlF
dmFsX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gUG9s
eUV2YWxfcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4
X3J1bl90ICpQb2x5RXZhbF9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVBv
bHlFdmFsX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZp
bGUgPSBtYXhfZW5naW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2
b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9u
c190ICphY3Rpb25zID0gUG9seUV2YWxfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZh
Y2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywg
IlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7
CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChj
Yl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9u
cyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFj
dGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8g
cnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4g
cnVuOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9u
IGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdy
b3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMg
dG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFi
bGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBQb2x5RXZhbF9ydW5fZ3JvdXAobWF4X2dyb3VwX3Qg
Kmdyb3VwLCBQb2x5RXZhbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVu
X3QgKnJ1biA9IFBvbHlFdmFsX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4
X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBu
b24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoK
ICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxh
YmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9m
IHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1
c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmlu
ZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50
YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3Vw
IHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4u
CiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlv
bnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqUG9seUV2YWxfcnVu
X2dyb3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgUG9seUV2YWxfYWN0aW9uc190ICpp
bnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRf
bWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFBvbHlFdmFsX2NvbnZl
cnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJ
aWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJy
b3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1
biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNf
ZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBh
ZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAK
ICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBc
cGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8g
cnVuLgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2lu
ZXMuICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNp
emUgb2YgZW5nYXJyYXkuCiAqLwp2b2lkIFBvbHlFdmFsX3J1bl9hcnJheShtYXhfZW5nYXJyYXlf
dCAqZW5nYXJyYXksIFBvbHlFdmFsX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJ
bWF4X3J1bl90ICpydW4gPSBQb2x5RXZhbF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGlu
dGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNl
ZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0
Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUg
YXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBv
ZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBU
aGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQg
b3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxs
ZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFy
YW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBb
aW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJl
dHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3Ig
TlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpQb2x5RXZhbF9ydW5fYXJyYXlf
bm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBQb2x5RXZhbF9hY3Rpb25zX3QgKmlu
dGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlf
Z2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFy
cmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFj
dGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25z
ID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3Ig
KCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFj
dGlvbnMgPSBQb2x5RXZhbF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rp
b25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVM
TDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXks
IGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2Nr
KGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7
IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJh
eV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8q
KgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50
byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRo
YXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVu
Y3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxl
IFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhl
IGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1p
Yy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICov
Cm1heF9hY3Rpb25zX3QqIFBvbHlFdmFsX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgUG9s
eUV2YWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIFBvbHlFdmFsX2Nv
bnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwp
Owp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 4, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 32, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c0214135659b2cfd57f2eb1445a92a601e80efbcb874502146439d83d778c48529e2fa4fcbe23c152941705f2")
#endif

