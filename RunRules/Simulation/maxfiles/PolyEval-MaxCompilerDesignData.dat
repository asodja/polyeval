#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2016
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46754
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2016-06-10"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "PolyEval"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/PolyEval_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20170125
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 109)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PolySimpleEvalKernel.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PolyEvalKernel.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PolySimpleSumKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, DFEMODEL, MAIA)
ENGINE_PARAMETERS(maxFileName, STRING, "PolyEval")
ENGINE_PARAMETERS(target, ENUM, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, BOOL, false)
ENGINE_PARAMETERS(MPPRStartCT, INT, 1)
ENGINE_PARAMETERS(MPPREndCT, INT, 1)
ENGINE_PARAMETERS(MPPRThreads, INT, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, INT, 0)
#endif






#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(PolySimpleEvalKernel, loop, 12)
#endif














#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(PolySimpleSumKernel, loop, 15)
#endif


#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(PolySimpleEvalKernel, Kernel)
MANAGER_NODE(PolyEvalKernel, Kernel)
MANAGER_NODE(PolySimpleSumKernel, Kernel)
MANAGER_NODE(constants, PCIe_From_Host)
MANAGER_NODE(exponents, PCIe_From_Host)
MANAGER_NODE(result, PCIe_To_Host)
MANAGER_NODE(Stream_9, DualAspectMux)
MANAGER_NODE(Stream_10, DualAspectMux)
MANAGER_NODE(Stream_14, DualAspectReg)
MANAGER_NODE(Stream_27, StreamPullPushAdapter)
MANAGER_NODE(Stream_17, Fifo)
MANAGER_NODE(Stream_21, Fifo)
MANAGER_NODE(Stream_19, Fifo)
MANAGER_NODE(Stream_23, Fifo)
MANAGER_NODE(Stream_7, Fifo)
MANAGER_NODE(Stream_11, Fifo)
MANAGER_NODE(Stream_25, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(PolySimpleEvalKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(PolyEvalKernel, constants, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, exponents, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, exponentValues, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(PolySimpleSumKernel, summands, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolySimpleSumKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(constants, constants, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(exponents, exponents, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(result, result, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_9, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_9, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_27, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_27, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_17, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_17, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_21, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_21, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_19, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_19, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_23, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_23, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_7, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_7, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_11, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_11, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_25, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_25, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(constants, constants, Stream_17, input, 128)
MANAGER_STREAM(exponents, exponents, Stream_21, input, 128)
MANAGER_STREAM(PolySimpleEvalKernel, result, Stream_7, input, 32)
MANAGER_STREAM(PolyEvalKernel, result, Stream_11, input, 32)
MANAGER_STREAM(PolySimpleSumKernel, result, Stream_25, input, 32)
MANAGER_STREAM(Stream_9, output, Stream_19, input, 32)
MANAGER_STREAM(Stream_10, output, Stream_23, input, 32)
MANAGER_STREAM(Stream_14, output, Stream_27, input, 128)
MANAGER_STREAM(Stream_27, output, result, result, 128)
MANAGER_STREAM(Stream_17, output, Stream_9, input, 128)
MANAGER_STREAM(Stream_21, output, Stream_10, input, 128)
MANAGER_STREAM(Stream_19, output, PolyEvalKernel, constants, 32)
MANAGER_STREAM(Stream_23, output, PolyEvalKernel, exponents, 32)
MANAGER_STREAM(Stream_7, output, PolyEvalKernel, exponentValues, 32)
MANAGER_STREAM(Stream_11, output, PolySimpleSumKernel, summands, 32)
MANAGER_STREAM(Stream_25, output, Stream_14, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(PolySimpleEvalKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(PolyEvalKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(PolySimpleSumKernel, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(constants, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1051)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:20)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(exponents, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1051)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:21)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(result, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1060)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:32)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_27, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_17, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_19, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_23, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_7, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_11, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
MANAGER_NODE_STACK_TRACE(Stream_25, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:68)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PolySimpleEvalKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PolySimpleEvalKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PolySimpleEvalKernel, PolySimpleEvalKernel)
#endif


#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PolySimpleEvalKernel, result, 0)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PolyEvalKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PolyEvalKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PolyEvalKernel, PolyEvalKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(PolyEvalKernel, constants, 0)
DEBUG_INPUT_BITS(PolyEvalKernel, exponents, 1)
DEBUG_INPUT_BITS(PolyEvalKernel, exponentValues, 2)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PolyEvalKernel, result, 0)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PolySimpleSumKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PolySimpleSumKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PolySimpleSumKernel, PolySimpleSumKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(PolySimpleSumKernel, summands, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PolySimpleSumKernel, result, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PolySimpleEvalKernel, PolySimpleEvalKernel, "PolySimpleEvalKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(constants, PCIePushSourceSyncMax4, "constants")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(exponents, PCIePushSourceSyncMax4, "exponents")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_7, FifoPushToPullSync, "Stream_7", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, FifoPushToPullSync, "Stream_17", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, FifoPushToPullSync, "Stream_21", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, DualAspectMuxSync, "Stream_9", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, DualAspectMuxSync, "Stream_10", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_19, FifoPushToPullSync, "Stream_19", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_23, FifoPushToPullSync, "Stream_23", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PolyEvalKernel, PolyEvalKernel, "PolyEvalKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_11, FifoPushToPullSync, "Stream_11", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PolySimpleSumKernel, PolySimpleSumKernel, "PolySimpleSumKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_25, FifoPushToPullSync, "Stream_25", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, DualAspectRegSync, "Stream_14", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_27, PullToPushAdapterSync, "Stream_27")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(result, PCIePushSinkSyncMax3, "result")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 1, 0, 0, 0, 0, 0, 109)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "a0641a6fff60135f73638ac70247168d5b0025390c34be4977f3ddace5e44661")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_fill_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_flush_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_flush_start_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_full_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleEvalKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_done, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_empty, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_request, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_fill_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_full_level, 10, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolySimpleSumKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(constants, STREAM_FROM_HOST, 0)
PCIE_STREAM(exponents, STREAM_FROM_HOST, 1)
PCIE_STREAM(result, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(PolySimpleEvalKernel.maxExponents, 0x0, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(PolySimpleEvalKernel.x, 0x4, 4, hwFloat(8, 24))
REG(PolySimpleEvalKernel.io_result_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolySimpleEvalKernel.run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolySimpleEvalKernel.current_run_cycle_count, 0xf, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolySimpleEvalKernel.dbg_ctld_almost_empty, 0x15, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_ctld_done, 0x16, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_ctld_empty, 0x17, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_ctld_read, 0x18, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_ctld_read_pipe_dbg, 0x19, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_ctld_request, 0x1a, 1, hwBits(0))
REG(PolySimpleEvalKernel.dbg_done_out, 0x1b, 1, hwBits(1))
REG(PolySimpleEvalKernel.dbg_fill_level, 0x1c, 1, hwBits(4))
REG(PolySimpleEvalKernel.dbg_flush_level, 0x1d, 1, hwBits(4))
REG(PolySimpleEvalKernel.dbg_flush_start, 0x1e, 1, hwBits(1))
REG(PolySimpleEvalKernel.dbg_flush_start_level, 0x1f, 1, hwBits(4))
REG(PolySimpleEvalKernel.dbg_flushing, 0x20, 1, hwBits(1))
REG(PolySimpleEvalKernel.dbg_full_level, 0x21, 1, hwBits(4))
REG(PolySimpleEvalKernel.dbg_out_stall, 0x22, 1, hwBits(1))
REG(PolySimpleEvalKernel.dbg_out_valid, 0x23, 1, hwBits(1))
REG(PolySimpleEvalKernel.dbg_stall_vector, 0x24, 1, hwBits(1))
REG(PolyEvalKernel.io_constants_force_disabled, 0x25, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_exponents_force_disabled, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_exponentValues_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_result_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.run_cycle_count, 0x29, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.current_run_cycle_count, 0x2f, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.dbg_ctld_almost_empty, 0x35, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_done, 0x36, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_empty, 0x37, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_read, 0x38, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x39, 2, hwBits(9))
REG(PolyEvalKernel.dbg_ctld_request, 0x3b, 1, hwBits(3))
REG(PolyEvalKernel.dbg_done_out, 0x3c, 1, hwBits(1))
REG(PolyEvalKernel.dbg_fill_level, 0x3d, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flush_level, 0x3f, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flush_start, 0x41, 1, hwBits(1))
REG(PolyEvalKernel.dbg_flush_start_level, 0x42, 2, hwBits(10))
REG(PolyEvalKernel.dbg_flushing, 0x44, 1, hwBits(1))
REG(PolyEvalKernel.dbg_full_level, 0x45, 2, hwBits(10))
REG(PolyEvalKernel.dbg_out_stall, 0x47, 1, hwBits(1))
REG(PolyEvalKernel.dbg_out_valid, 0x48, 1, hwBits(1))
REG(PolyEvalKernel.dbg_stall_vector, 0x49, 1, hwBits(1))
REG(PolySimpleSumKernel.io_summands_force_disabled, 0x4a, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolySimpleSumKernel.io_result_force_disabled, 0x4b, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolySimpleSumKernel.run_cycle_count, 0x4c, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolySimpleSumKernel.current_run_cycle_count, 0x52, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolySimpleSumKernel.dbg_ctld_almost_empty, 0x58, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_ctld_done, 0x59, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_ctld_empty, 0x5a, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_ctld_read, 0x5b, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_ctld_read_pipe_dbg, 0x5c, 1, hwBits(3))
REG(PolySimpleSumKernel.dbg_ctld_request, 0x5d, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_done_out, 0x5e, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_fill_level, 0x5f, 1, hwBits(5))
REG(PolySimpleSumKernel.dbg_flush_level, 0x60, 1, hwBits(5))
REG(PolySimpleSumKernel.dbg_flush_start, 0x61, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_flush_start_level, 0x62, 1, hwBits(5))
REG(PolySimpleSumKernel.dbg_flushing, 0x63, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_full_level, 0x64, 1, hwBits(5))
REG(PolySimpleSumKernel.dbg_out_stall, 0x65, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_out_valid, 0x66, 1, hwBits(1))
REG(PolySimpleSumKernel.dbg_stall_vector, 0x67, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x68, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x69, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(PolySimpleEvalKernel.maxExponents, 0x0, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolySimpleEvalKernel.x, 0x4, 4, hwFloat(8, 24), HOST_WRITE_ONLY, false)
REG_V2(PolySimpleEvalKernel.io_result_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolySimpleEvalKernel.run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolySimpleEvalKernel.current_run_cycle_count, 0xf, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_almost_empty, 0x15, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_done, 0x16, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_empty, 0x17, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_read, 0x18, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_read_pipe_dbg, 0x19, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_ctld_request, 0x1a, 1, hwBits(0), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_done_out, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_fill_level, 0x1c, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_flush_level, 0x1d, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_flush_start, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_flush_start_level, 0x1f, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_flushing, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_full_level, 0x21, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_out_stall, 0x22, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_out_valid, 0x23, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleEvalKernel.dbg_stall_vector, 0x24, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.io_constants_force_disabled, 0x25, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_exponents_force_disabled, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_exponentValues_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_result_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.run_cycle_count, 0x29, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolyEvalKernel.current_run_cycle_count, 0x2f, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_almost_empty, 0x35, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_done, 0x36, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_empty, 0x37, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read, 0x38, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x39, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_request, 0x3b, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_done_out, 0x3c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_fill_level, 0x3d, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_level, 0x3f, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start, 0x41, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start_level, 0x42, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flushing, 0x44, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_full_level, 0x45, 2, hwBits(10), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_stall, 0x47, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_valid, 0x48, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_stall_vector, 0x49, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.io_summands_force_disabled, 0x4a, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolySimpleSumKernel.io_result_force_disabled, 0x4b, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolySimpleSumKernel.run_cycle_count, 0x4c, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolySimpleSumKernel.current_run_cycle_count, 0x52, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_almost_empty, 0x58, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_done, 0x59, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_empty, 0x5a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_read, 0x5b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_read_pipe_dbg, 0x5c, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_ctld_request, 0x5d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_done_out, 0x5e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_fill_level, 0x5f, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_flush_level, 0x60, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_flush_start, 0x61, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_flush_start_level, 0x62, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_flushing, 0x63, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_full_level, 0x64, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_out_stall, 0x65, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_out_valid, 0x66, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolySimpleSumKernel.dbg_stall_vector, 0x67, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x68, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x69, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("a0641a6fff60135f73638ac70247168d5b0025390c34be4977f3ddace5e44661")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME PolyEval
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_PolyEval_H
#define SLIC_DECLARATIONS_PolyEval_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define PolyEval_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Auxiliary function to evaluate expression for "PolySimpleSumKernel.loop".
 */
int PolyEval_get_PolySimpleSumKernel_loop( void );

/**
 * \brief Auxiliary function to evaluate expression for "PolySimpleEvalKernel.loop".
 */
int PolyEval_get_PolySimpleEvalKernel_loop( void );


/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_maxExponents Interface Parameter "maxExponents".
 * \param [in] param_n Interface Parameter "n".
 * \param [in] param_x Interface Parameter "x".
 * \param [in] instream_constants The stream should be of size (param_n * 4) bytes.
 * \param [in] instream_exponents The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 */
void PolyEval(
	uint32_t param_maxExponents,
	int32_t param_n,
	float param_x,
	const float *instream_constants,
	const int32_t *instream_exponents,
	float *outstream_result);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_maxExponents Interface Parameter "maxExponents".
 * \param [in] param_n Interface Parameter "n".
 * \param [in] param_x Interface Parameter "x".
 * \param [in] instream_constants The stream should be of size (param_n * 4) bytes.
 * \param [in] instream_exponents The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *PolyEval_nonblock(
	uint32_t param_maxExponents,
	int32_t param_n,
	float param_x,
	const float *instream_constants,
	const int32_t *instream_exponents,
	float *outstream_result);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint32_t param_maxExponents; /**<  [in] Interface Parameter "maxExponents". */
	int32_t param_n; /**<  [in] Interface Parameter "n". */
	float param_x; /**<  [in] Interface Parameter "x". */
	const float *instream_constants; /**<  [in] The stream should be of size (param_n * 4) bytes. */
	const int32_t *instream_exponents; /**<  [in] The stream should be of size (param_n * 4) bytes. */
	float *outstream_result; /**<  [out] The stream should be of size (param_n * 4) bytes. */
} PolyEval_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* PolyEval_init(void);

/* Error handling functions */
int PolyEval_has_errors(void);
const char* PolyEval_get_errors(void);
void PolyEval_clear_errors(void);
/* Free statically allocated maxfile data */
void PolyEval_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_PolyEval_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PolySimpleEvalKernel, 2, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:496)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:23)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 38, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x0c; 12.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream$OffsetExpr.getDFEVar(Stream.java:185)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:22)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 4, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:527)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:25)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 37, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 42, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 13, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 31, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:590)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 15, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 16, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 17, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 0, NodeInputMappedReg, "Scalar input (maxExponents)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1116)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:21)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 3, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:527)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:24)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 41, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 32, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 36, NodeStreamOffset, "stream offset: -12", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:356)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:31)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 5, NodeInputMappedReg, "Scalar input (x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1116)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:28)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 8, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 9, NodeConstantRawBits, "{HWFloat:8, 24}\n0x3f800000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 10, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 18, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleEvalKernel.<init>(PolySimpleEvalKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 23, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 40, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 20, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 21, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 22, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 24, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 39, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 26, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 27, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 29, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 33, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleEvalKernel, 28, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:15)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
#endif

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PolyEvalKernel, 19, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 3, NodeInputMappedReg, "Scalar input (io_constants_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 4, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 5, NodeInput, "Input(constants)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:19)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 9, NodeInputMappedReg, "Scalar input (io_exponentValues_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 10, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 11, NodeInput, "Input(exponentValues)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:21)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 6, NodeInputMappedReg, "Scalar input (io_exponents_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 7, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 8, NodeInput, "Input(exponents)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:20)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 40, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 1, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 2, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:527)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:18)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 36, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 15, NodeStreamOffset, "stream offset: -1000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:517)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 16, NodeDynamicStreamOffset, "dynamic offset: [0, 1000]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:517)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:22)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 17, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:25)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 22, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:836)\npolyeval.PolyEvalKernel.<init>(PolyEvalKernel.maxj:28)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 27, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 39, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 24, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 25, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 26, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 28, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 38, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 30, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 31, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 33, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 37, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 32, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:16)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
#endif

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PolySimpleSumKernel, 1, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:496)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:29)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 46, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x0f; 15.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream$OffsetExpr.getDFEVar(Stream.java:185)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:28)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 4, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:527)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:31)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 43, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 52, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 18, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 36, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:590)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 20, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 21, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 22, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 45, NodeFIFO, "FIFO(18)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 51, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 37, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 7, NodeInputMappedReg, "Scalar input (io_summands_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:546)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 8, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:546)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 9, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:546)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 10, NodeInput, "Input(summands)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:546)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:34)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 50, NodeConstantRawBits, "{HWOffsetFix:4, 0, UNSIGNED}\n0x8; 8.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:505)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 3, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:505)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:30)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 49, NodeConstantRawBits, "{HWOffsetFix:3, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:36)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 38, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:36)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 44, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 42, NodeStreamOffset, "stream offset: -15", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:356)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:38)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 13, NodeConstantRawBits, "{HWFloat:8, 24}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:36)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 14, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:36)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 15, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:37)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 23, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:41)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 28, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 48, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 25, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 26, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 27, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 29, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 47, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 31, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 32, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 34, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 39, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
PHOTON_NODE_DATA(PolySimpleSumKernel, 33, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:879)\npolyeval.PolyEvalMultipleManager.<init>(PolyEvalMultipleManager.maxj:17)\npolyeval.PolyEvalMultipleManager.main(PolyEvalMultipleManager.maxj:66)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int PolyEval_has_errors(void)
{	return stored_has_error; }
const char* PolyEval_get_errors(void)
{	return stored_error; }
void PolyEval_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char PolyEval_use_simulation[16];
static void PolyEval_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(PolyEval_use_simulation, 16, "PolyEval_%05ld_", pid);
}
static const char *PolyEval_check_use_simulation(void)
{
	PolyEval_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = PolyEval_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int PolyEval_simulation_launch = 0;
int PolyEval_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int PolyEval_simulator_stop(void)
{
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void PolyEval_static_init(void) 
{
	stored_maxfile = PolyEval_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = PolyEval_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = PolyEval_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			PolyEval_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void PolyEval_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (PolyEval_simulation_launch == 1) {
		int sim_stat = PolyEval_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		PolyEval_simulation_launch = 0;
	}
}

static int PolyEval_get_pcie_alignment(void)
{
#ifdef PolyEval_PCIE_ALIGNMENT
	return ((PolyEval_PCIE_ALIGNMENT < 1) ? 16 : PolyEval_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int PolyEval_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = PolyEval_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *PolyEval_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = PolyEval_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Auxiliary function to evaluate expression for "PolySimpleSumKernel.loop".
 */
int PolyEval_get_PolySimpleSumKernel_loop( void )
{
	return 15;
}

/**
 * \brief Auxiliary function to evaluate expression for "PolySimpleEvalKernel.loop".
 */
int PolyEval_get_PolySimpleEvalKernel_loop( void )
{
	return 12;
}

#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct PolyEval_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} PolyEval_callback_stream_t;

typedef struct PolyEval_callback_data {
	PolyEval_callback_stream_t stream[3]; 
	int count;
	int max_count;
} PolyEval_callback_data_t;

static void PolyEval_callback_internal(void *cb_data)
{
	PolyEval_callback_data_t *data = (PolyEval_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		PolyEval_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* PolyEval_convert_internal(
	max_file_t *maxfile,
	PolyEval_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	PolyEval_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(PolyEval_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function PolyEval_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 3;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &PolyEval_callback_internal;
	}

	int32_t param_n = interface_actions->param_n;
	
	/* code for scalar PolyEvalKernel.run_cycle_count */
	uint64_t ticks_PolyEvalKernel = param_n;
	max_set_ticks(actions, "PolyEvalKernel", param_n);
	CHECK_ERRORS;
	/* end of code for scalar PolyEvalKernel.run_cycle_count*/
	
	int32_t param_PolySimpleEvalKernel_loop = PolyEval_get_PolySimpleEvalKernel_loop(  );
	
	uint32_t param_maxExponents = interface_actions->param_maxExponents;
	
	int32_t tmp_3 = (param_maxExponents * param_PolySimpleEvalKernel_loop);
	
	/* code for scalar PolySimpleEvalKernel.run_cycle_count */
	uint64_t ticks_PolySimpleEvalKernel = tmp_3;
	max_set_ticks(actions, "PolySimpleEvalKernel", tmp_3);
	CHECK_ERRORS;
	/* end of code for scalar PolySimpleEvalKernel.run_cycle_count*/
	
	int32_t param_PolySimpleSumKernel_loop = PolyEval_get_PolySimpleSumKernel_loop(  );
	
	int32_t tmp_4 = (param_n * param_PolySimpleSumKernel_loop);
	
	/* code for scalar PolySimpleSumKernel.run_cycle_count */
	uint64_t ticks_PolySimpleSumKernel = tmp_4;
	max_set_ticks(actions, "PolySimpleSumKernel", tmp_4);
	CHECK_ERRORS;
	/* end of code for scalar PolySimpleSumKernel.run_cycle_count*/
	
	/* code for scalar PolySimpleEvalKernel.maxExponents */
	uint64_t inscalar_PolySimpleEvalKernel_maxExponents = param_maxExponents;
	max_set_uint64t(actions, "PolySimpleEvalKernel", "maxExponents", inscalar_PolySimpleEvalKernel_maxExponents);
	CHECK_ERRORS;
	/* end of code for scalar PolySimpleEvalKernel.maxExponents*/
	
	float param_x = interface_actions->param_x;
	
	/* code for scalar PolySimpleEvalKernel.x */
	double inscalar_PolySimpleEvalKernel_x = param_x;
	max_set_double(actions, "PolySimpleEvalKernel", "x", inscalar_PolySimpleEvalKernel_x);
	CHECK_ERRORS;
	/* end of code for scalar PolySimpleEvalKernel.x*/
	
	int64_t tmp_0 = (param_n * 4);
	
	/* code for stream constants */
	size_t instream_size_constants = tmp_0;
	if (instream_size_constants > 0) {
		const float *stream_ptr = interface_actions->instream_constants;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_constants))) {
			float *aligned_instream_constants = malloc(instream_size_constants);
			if (aligned_instream_constants == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'constants'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_constants;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_constants;
			(&cb_data->stream[cb_data->count])->size        = instream_size_constants;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_constants, interface_actions->instream_constants, instream_size_constants);
			stream_ptr = aligned_instream_constants;
		}
		max_queue_input(actions, "constants", stream_ptr, instream_size_constants);
		CHECK_ERRORS;
	}
	/* end of code for stream constants */
	
	int64_t tmp_1 = (param_n * 4);
	
	/* code for stream exponents */
	size_t instream_size_exponents = tmp_1;
	if (instream_size_exponents > 0) {
		const int32_t *stream_ptr = interface_actions->instream_exponents;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_exponents))) {
			int32_t *aligned_instream_exponents = malloc(instream_size_exponents);
			if (aligned_instream_exponents == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'exponents'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_exponents;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_exponents;
			(&cb_data->stream[cb_data->count])->size        = instream_size_exponents;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_exponents, interface_actions->instream_exponents, instream_size_exponents);
			stream_ptr = aligned_instream_exponents;
		}
		max_queue_input(actions, "exponents", stream_ptr, instream_size_exponents);
		CHECK_ERRORS;
	}
	/* end of code for stream exponents */
	
	int64_t tmp_2 = (param_n * 4);
	
	/* code for stream result */
	size_t outstream_size_result = tmp_2;
	if (outstream_size_result > 0) {
		float *stream_ptr = interface_actions->outstream_result;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->outstream_result))) {
			float *aligned_outstream_result = malloc(outstream_size_result);
			if (aligned_outstream_result == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'result'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_result;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_result;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_result;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_result;
		}
		max_queue_output(actions, "result", stream_ptr, outstream_size_result);
		CHECK_ERRORS;
	}
	/* end of code for stream result */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void PolyEval(
	uint32_t param_maxExponents,
	int32_t param_n,
	float param_x,
	const float *instream_constants,
	const int32_t *instream_exponents,
	float *outstream_result)
{
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = PolyEval_nonblock(param_maxExponents, param_n, param_x, instream_constants, instream_exponents, outstream_result);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_nonblock(
	uint32_t param_maxExponents,
	int32_t param_n,
	float param_x,
	const float *instream_constants,
	const int32_t *instream_exponents,
	float *outstream_result)
{
	PolyEval_actions_t interface_actions;
	interface_actions.param_maxExponents = param_maxExponents;
	interface_actions.param_n = param_n;
	interface_actions.param_x = param_x;
	interface_actions.instream_constants = instream_constants;
	interface_actions.instream_exponents = instream_exponents;
	interface_actions.outstream_result = outstream_result;
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_run_t *run = PolyEval_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions)
{
	return PolyEval_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, n, param_n)	
SLIC_SET_TICKS(PolyEvalKernel, param_n)	
SLIC_AUTO_LOOP_OFFSET(int32_t, PolySimpleEvalKernel, loop, param_PolySimpleEvalKernel_loop)	
SLIC_PARAMETER_UINT64(uint32_t, maxExponents, param_maxExponents)	
SLIC_TEMP_VAR(int32_t tmp_3 = (param_maxExponents * param_PolySimpleEvalKernel_loop);)	
SLIC_SET_TICKS(PolySimpleEvalKernel, tmp_3)	
SLIC_AUTO_LOOP_OFFSET(int32_t, PolySimpleSumKernel, loop, param_PolySimpleSumKernel_loop)	
SLIC_TEMP_VAR(int32_t tmp_4 = (param_n * param_PolySimpleSumKernel_loop);)	
SLIC_SET_TICKS(PolySimpleSumKernel, tmp_4)	
SLIC_SCALAR_UINT64(PolySimpleEvalKernel, maxExponents, param_maxExponents)	
SLIC_PARAMETER_DOUBLE(float, x, param_x)	
SLIC_SCALAR_DOUBLE(PolySimpleEvalKernel, x, param_x)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_n * 4);)	
SLIC_STREAM(constants, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_n * 4);)	
SLIC_STREAM(exponents, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_n * 4);)	
SLIC_STREAM(result, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlBvbHlFdmFsLmgiIG5hbWU9
IlBvbHlFdmFsIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9ImxvbmciIHZh
bHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJQb2x5
RXZhbCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7bWF4RXhwb25lbnRzJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFy
YW1fbWF4RXhwb25lbnRzIiB0eXBlPSJ1aW50MzJfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNl
IFBhcmFtZXRlciAmcXVvdDtuJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1f
biIgdHlwZT0iaW50MzJfdCIvPjxzY2FsYXIgZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVv
dDt4JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0icGFyYW1feCIgdHlwZT0iZmxvYXQi
Lz48YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fbiAqIDQp
IGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fY29uc3RhbnRzIiBzaXpl
PSIocGFyYW1fbiAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48ZGltZW5zaW9u
IGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJh
dG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9uICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fbiAqIDQpIj48dXNlclBhcmFt
IHZhbHVlPSJwYXJhbV9uIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9w
ZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5h
cnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5Pjxh
cnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9uICogNCkgYnl0
ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9leHBvbmVudHMiIHNpemU9Iihw
YXJhbV9uICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iaW50MzJfdCI+PGRpbWVuc2lvbiBp
bmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRv
cj0iLyIgdmFsdWU9IigocGFyYW1fbiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFy
eU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX24gKiA0KSI+PHVzZXJQYXJhbSB2
YWx1ZT0icGFyYW1fbiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVy
YXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5
T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJy
YXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fbiAqIDQpIGJ5dGVz
LiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9yZXN1bHQiIHNpemU9IihwYXJh
bV9uICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZmxvYXQiPjxkaW1lbnNpb24gaW5kZXg9
IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8i
IHZhbHVlPSIoKHBhcmFtX24gKiA0KSAvIDQpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVy
YXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJhbV9uICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9
InBhcmFtX24iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+
PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJh
dG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlv
bj48L2VuZ2luZW1vZGU+PC9tYXhmaWxlPg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBQb2x5RXZhbF9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNfZXJy
b3I7IH0KY29uc3QgY2hhciogUG9seUV2YWxfZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9y
ZWRfZXJyb3I7IH0Kdm9pZCBQb2x5RXZhbF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9y
ZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9
CgpzdGF0aWMgY2hhciBQb2x5RXZhbF91c2Vfc2ltdWxhdGlvblsxNl07CnN0YXRpYyB2b2lkIFBv
bHlFdmFsX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBpZCA9ICgobG9uZykgZ2V0
cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYoUG9seUV2YWxfdXNlX3NpbXVsYXRpb24sIDE2LCAi
UG9seUV2YWxfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqUG9seUV2YWxfY2hl
Y2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJUG9seUV2YWxfZGVmX3VzZV9zaW11bGF0aW9uKCk7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdf
VVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBQb2x5
RXZhbF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19V
U0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGlu
dCBQb2x5RXZhbF9zaW11bGF0aW9uX2xhdW5jaCA9IDA7CmludCBQb2x5RXZhbF9zaW11bGF0b3Jf
c3RhcnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gUG9s
eUV2YWxfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRm
KGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4g
JXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlw
ZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNh
dChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsK
CQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEw
MjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxh
dG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlm
IChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwg
PSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgUG9s
eUV2YWxfc2ltdWxhdG9yX3N0b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFBvbHlF
dmFsX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50Zihi
dWZmLCAxMDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVz
IC1jIE1BWDQ4NDhBIC1TIHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAg
PSBwb3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVm
ZiwgIiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0
X2Vycm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBw
aXBlX2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBj
b21tYW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9Cglw
Y2xvc2UocGlwZV9mcCk7CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgUG9seUV2YWxfc3RhdGlj
X2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gUG9seUV2YWxfaW5pdCgpOwoJaWYgKHN0
b3JlZF9tYXhmaWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkg
ewoJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7
IHNldF9lcnJvcigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFt
YXhfb2sobWF4X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9j
b25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9S
KSkKCQltYXhfZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3Qg
dGltZW91dF9wcmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsK
CWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBQb2x5RXZhbF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJ
aWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWlu
dCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQg
PT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkp
IHsKCQkJUG9seUV2YWxfc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9l
cnJvcigiRXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUg
c2ltdWxhdGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3Io
IkVycm9yOiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBz
ZXQgY29ycmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigi
RXJyb3I6IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlz
IHJ1bm5pbmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xv
YWQoc3RvcmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJy
b3JzKSkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxv
YWQgZW5naW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJv
cnQoKTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShz
dG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUp
OwoJCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2Fk
X3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgUG9seUV2
YWxfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9h
ZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRf
bWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3Rv
cmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJl
ZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoUG9seUV2YWxf
c2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVs
YXRvcl9zdG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
RXJyb3Igc3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlQb2x5RXZhbF9zaW11bGF0aW9uX2xh
dW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgUG9seUV2YWxfZ2V0X3BjaWVfYWxpZ25tZW50KHZv
aWQpCnsKI2lmZGVmIFBvbHlFdmFsX1BDSUVfQUxJR05NRU5UCglyZXR1cm4gKChQb2x5RXZhbF9Q
Q0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBQb2x5RXZhbF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNl
CglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQo
Y29uc3Qgdm9pZCAqZGF0YSkKewoJdWludHB0cl90IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRh
OwoJaW50IGFsaWdubWVudCA9IFBvbHlFdmFsX2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJu
IChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9CgpzdGF0aWMgdm9pZCAqUG9seUV2YWxf
bWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGln
bm1lbnQgPSBQb2x5RXZhbF9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZw
dHIsIGFsaWdubWVudCwgc2l6ZSk7CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAt
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoK
Ci8qKgogKiBcYnJpZWYgQXV4aWxpYXJ5IGZ1bmN0aW9uIHRvIGV2YWx1YXRlIGV4cHJlc3Npb24g
Zm9yICJQb2x5U2ltcGxlU3VtS2VybmVsLmxvb3AiLgogKi8KaW50IFBvbHlFdmFsX2dldF9Qb2x5
U2ltcGxlU3VtS2VybmVsX2xvb3AoIHZvaWQgKQp7CglyZXR1cm4gMTU7Cn0KCi8qKgogKiBcYnJp
ZWYgQXV4aWxpYXJ5IGZ1bmN0aW9uIHRvIGV2YWx1YXRlIGV4cHJlc3Npb24gZm9yICJQb2x5U2lt
cGxlRXZhbEtlcm5lbC5sb29wIi4KICovCmludCBQb2x5RXZhbF9nZXRfUG9seVNpbXBsZUV2YWxL
ZXJuZWxfbG9vcCggdm9pZCApCnsKCXJldHVybiAxMjsKfQoKI2RlZmluZSBDSEVDS19FUlJPUlNf
U1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmlnX2dldF9i
b29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50
ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7
IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyByZXR1
cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFM
VUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAo
c3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9y
dCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVj
dCBQb2x5RXZhbF9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90
ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gUG9s
eUV2YWxfY2FsbGJhY2tfc3RyZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBQb2x5RXZhbF9jYWxsYmFj
a19kYXRhIHsKCVBvbHlFdmFsX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVszXTsgCglpbnQgY291
bnQ7CglpbnQgbWF4X2NvdW50Owp9IFBvbHlFdmFsX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2
b2lkIFBvbHlFdmFsX2NhbGxiYWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCVBvbHlFdmFs
X2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChQb2x5RXZhbF9jYWxsYmFja19kYXRhX3QqKSBjYl9k
YXRhOwoJZm9yIChpbnQgaSA9IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJUG9seUV2
YWxfY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19v
dXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWdu
ZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRh
dGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogUG9seUV2YWxfY29udmVydF9pbnRlcm5hbCgK
CW1heF9maWxlX3QgKm1heGZpbGUsCglQb2x5RXZhbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rp
b25zLAoJaW50ICBpc19pbnRlcm5hbF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lk
KiksCgl2b2lkICoqY2FsbGJhY2tfZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1h
eF9hY3Rpb25zX2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVy
biBOVUxMOwoKI2RlZmluZSBDSEVDS19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykp
OyByZXR1cm4gTlVMTDsgfSAKCglQb2x5RXZhbF9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBO
VUxMOwoJaW50IHVzZV9jYWxsYmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxs
YmFja19kYXRhICE9IE5VTEwpOwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxs
b2Moc2l6ZW9mKFBvbHlFdmFsX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5V
TEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBz
dHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBQb2x5RXZhbF9jb252ZXJ0X2ludGVybmFs
XG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDM7CgkJY2Jf
ZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpj
YWxsYmFja19mdW5jICAgICA9ICZQb2x5RXZhbF9jYWxsYmFja19pbnRlcm5hbDsKCX0KCglpbnQz
Ml90IHBhcmFtX24gPSBpbnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1fbjsKCQoJLyogY29kZSBmb3Ig
c2NhbGFyIFBvbHlFdmFsS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3Nf
UG9seUV2YWxLZXJuZWwgPSBwYXJhbV9uOwoJbWF4X3NldF90aWNrcyhhY3Rpb25zLCAiUG9seUV2
YWxLZXJuZWwiLCBwYXJhbV9uKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBz
Y2FsYXIgUG9seUV2YWxLZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJaW50MzJfdCBwYXJhbV9Q
b2x5U2ltcGxlRXZhbEtlcm5lbF9sb29wID0gUG9seUV2YWxfZ2V0X1BvbHlTaW1wbGVFdmFsS2Vy
bmVsX2xvb3AoICApOwoJCgl1aW50MzJfdCBwYXJhbV9tYXhFeHBvbmVudHMgPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+cGFyYW1fbWF4RXhwb25lbnRzOwoJCglpbnQzMl90IHRtcF8zID0gKHBhcmFtX21h
eEV4cG9uZW50cyAqIHBhcmFtX1BvbHlTaW1wbGVFdmFsS2VybmVsX2xvb3ApOwoJCgkvKiBjb2Rl
IGZvciBzY2FsYXIgUG9seVNpbXBsZUV2YWxLZXJuZWwucnVuX2N5Y2xlX2NvdW50ICovCgl1aW50
NjRfdCB0aWNrc19Qb2x5U2ltcGxlRXZhbEtlcm5lbCA9IHRtcF8zOwoJbWF4X3NldF90aWNrcyhh
Y3Rpb25zLCAiUG9seVNpbXBsZUV2YWxLZXJuZWwiLCB0bXBfMyk7CglDSEVDS19FUlJPUlM7Cgkv
KiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFBvbHlTaW1wbGVFdmFsS2VybmVsLnJ1bl9jeWNsZV9j
b3VudCovCgkKCWludDMyX3QgcGFyYW1fUG9seVNpbXBsZVN1bUtlcm5lbF9sb29wID0gUG9seUV2
YWxfZ2V0X1BvbHlTaW1wbGVTdW1LZXJuZWxfbG9vcCggICk7CgkKCWludDMyX3QgdG1wXzQgPSAo
cGFyYW1fbiAqIHBhcmFtX1BvbHlTaW1wbGVTdW1LZXJuZWxfbG9vcCk7CgkKCS8qIGNvZGUgZm9y
IHNjYWxhciBQb2x5U2ltcGxlU3VtS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3Qg
dGlja3NfUG9seVNpbXBsZVN1bUtlcm5lbCA9IHRtcF80OwoJbWF4X3NldF90aWNrcyhhY3Rpb25z
LCAiUG9seVNpbXBsZVN1bUtlcm5lbCIsIHRtcF80KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBv
ZiBjb2RlIGZvciBzY2FsYXIgUG9seVNpbXBsZVN1bUtlcm5lbC5ydW5fY3ljbGVfY291bnQqLwoJ
CgkvKiBjb2RlIGZvciBzY2FsYXIgUG9seVNpbXBsZUV2YWxLZXJuZWwubWF4RXhwb25lbnRzICov
Cgl1aW50NjRfdCBpbnNjYWxhcl9Qb2x5U2ltcGxlRXZhbEtlcm5lbF9tYXhFeHBvbmVudHMgPSBw
YXJhbV9tYXhFeHBvbmVudHM7CgltYXhfc2V0X3VpbnQ2NHQoYWN0aW9ucywgIlBvbHlTaW1wbGVF
dmFsS2VybmVsIiwgIm1heEV4cG9uZW50cyIsIGluc2NhbGFyX1BvbHlTaW1wbGVFdmFsS2VybmVs
X21heEV4cG9uZW50cyk7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFy
IFBvbHlTaW1wbGVFdmFsS2VybmVsLm1heEV4cG9uZW50cyovCgkKCWZsb2F0IHBhcmFtX3ggPSBp
bnRlcmZhY2VfYWN0aW9ucy0+cGFyYW1feDsKCQoJLyogY29kZSBmb3Igc2NhbGFyIFBvbHlTaW1w
bGVFdmFsS2VybmVsLnggKi8KCWRvdWJsZSBpbnNjYWxhcl9Qb2x5U2ltcGxlRXZhbEtlcm5lbF94
ID0gcGFyYW1feDsKCW1heF9zZXRfZG91YmxlKGFjdGlvbnMsICJQb2x5U2ltcGxlRXZhbEtlcm5l
bCIsICJ4IiwgaW5zY2FsYXJfUG9seVNpbXBsZUV2YWxLZXJuZWxfeCk7CglDSEVDS19FUlJPUlM7
CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIFBvbHlTaW1wbGVFdmFsS2VybmVsLngqLwoJCglp
bnQ2NF90IHRtcF8wID0gKHBhcmFtX24gKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGNvbnN0
YW50cyAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfY29uc3RhbnRzID0gdG1wXzA7CglpZiAoaW5z
dHJlYW1fc2l6ZV9jb25zdGFudHMgPiAwKSB7CgkJY29uc3QgZmxvYXQgKnN0cmVhbV9wdHIgPSBp
bnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fY29uc3RhbnRzOwoJCWlmICh1c2VfY2FsbGJhY2sg
JiYgKDEgPT0gUG9seUV2YWxfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJl
YW1fY29uc3RhbnRzKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRfaW5zdHJlYW1fY29uc3RhbnRzID0g
bWFsbG9jKGluc3RyZWFtX3NpemVfY29uc3RhbnRzKTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1f
Y29uc3RhbnRzID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5l
cnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWdu
ZWQgbWVtb3J5IGZvciBzdHJlYW0gJ2NvbnN0YW50cyciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJ
fQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1
aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2NvbnN0YW50czsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFs
aWduZWRfaW5zdHJlYW1fY29uc3RhbnRzOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfY29uc3RhbnRzOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEt
PmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2NvbnN0YW50cywgaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX2NvbnN0YW50cywgaW5zdHJlYW1fc2l6ZV9jb25zdGFudHMp
OwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9jb25zdGFudHM7CgkJfQoJCW1heF9x
dWV1ZV9pbnB1dChhY3Rpb25zLCAiY29uc3RhbnRzIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6
ZV9jb25zdGFudHMpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJl
YW0gY29uc3RhbnRzICovCgkKCWludDY0X3QgdG1wXzEgPSAocGFyYW1fbiAqIDQpOwoJCgkvKiBj
b2RlIGZvciBzdHJlYW0gZXhwb25lbnRzICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9leHBvbmVu
dHMgPSB0bXBfMTsKCWlmIChpbnN0cmVhbV9zaXplX2V4cG9uZW50cyA+IDApIHsKCQljb25zdCBp
bnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2V4cG9uZW50
czsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQoaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2V4cG9uZW50cykpKSB7CgkJCWludDMyX3QgKmFsaWdu
ZWRfaW5zdHJlYW1fZXhwb25lbnRzID0gbWFsbG9jKGluc3RyZWFtX3NpemVfZXhwb25lbnRzKTsK
CQkJaWYgKGFsaWduZWRfaW5zdHJlYW1fZXhwb25lbnRzID09IE5VTEwpIHsKCQkJCW1heF9yZXBv
cnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAi
RmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ2V4cG9uZW50cyci
KTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3Ry
ZWFtX2V4cG9uZW50czsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxp
Z25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1fZXhwb25lbnRzOwoJCQkoJmNi
X2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3Np
emVfZXhwb25lbnRzOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2lu
c3RyZWFtX2V4cG9uZW50cywgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2V4cG9uZW50cywg
aW5zdHJlYW1fc2l6ZV9leHBvbmVudHMpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVh
bV9leHBvbmVudHM7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAiZXhwb25lbnRzIiwg
c3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9leHBvbmVudHMpOwoJCUNIRUNLX0VSUk9SUzsKCX0K
CS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gZXhwb25lbnRzICovCgkKCWludDY0X3QgdG1wXzIg
PSAocGFyYW1fbiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gcmVzdWx0ICovCglzaXplX3Qg
b3V0c3RyZWFtX3NpemVfcmVzdWx0ID0gdG1wXzI7CglpZiAob3V0c3RyZWFtX3NpemVfcmVzdWx0
ID4gMCkgewoJCWZsb2F0ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVh
bV9yZXN1bHQ7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBQb2x5RXZhbF9jaGVja19hbGln
bmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0KSkpIHsKCQkJZmxvYXQgKmFs
aWduZWRfb3V0c3RyZWFtX3Jlc3VsdCA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9yZXN1bHQpOwoJ
CQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fcmVzdWx0ID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRf
ZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFp
bGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ3Jlc3VsdCciKTsKCQkJ
CUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9y
ZXN1bHQ7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRy
ID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9yZXN1bHQ7CgkJCSgmY2JfZGF0YS0+c3Ry
ZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3NpemVfcmVzdWx0
OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7
CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVh
bV9yZXN1bHQ7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9ucywgInJlc3VsdCIsIHN0cmVh
bV9wdHIsIG91dHN0cmVhbV9zaXplX3Jlc3VsdCk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5k
IG9mIGNvZGUgZm9yIHN0cmVhbSByZXN1bHQgKi8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9k
YXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19m
dW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBD
SEVDS19FUlJPUlMKfQoKdm9pZCBQb2x5RXZhbCgKCXVpbnQzMl90IHBhcmFtX21heEV4cG9uZW50
cywKCWludDMyX3QgcGFyYW1fbiwKCWZsb2F0IHBhcmFtX3gsCgljb25zdCBmbG9hdCAqaW5zdHJl
YW1fY29uc3RhbnRzLAoJY29uc3QgaW50MzJfdCAqaW5zdHJlYW1fZXhwb25lbnRzLAoJZmxvYXQg
Km91dHN0cmVhbV9yZXN1bHQpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5p
dGlhbGlzZWQsIFBvbHlFdmFsX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZp
bGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gUG9seUV2
YWxfbm9uYmxvY2socGFyYW1fbWF4RXhwb25lbnRzLCBwYXJhbV9uLCBwYXJhbV94LCBpbnN0cmVh
bV9jb25zdGFudHMsIGluc3RyZWFtX2V4cG9uZW50cywgb3V0c3RyZWFtX3Jlc3VsdCk7CglDSEVD
S19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9
CgptYXhfcnVuX3QgKlBvbHlFdmFsX25vbmJsb2NrKAoJdWludDMyX3QgcGFyYW1fbWF4RXhwb25l
bnRzLAoJaW50MzJfdCBwYXJhbV9uLAoJZmxvYXQgcGFyYW1feCwKCWNvbnN0IGZsb2F0ICppbnN0
cmVhbV9jb25zdGFudHMsCgljb25zdCBpbnQzMl90ICppbnN0cmVhbV9leHBvbmVudHMsCglmbG9h
dCAqb3V0c3RyZWFtX3Jlc3VsdCkKewoJUG9seUV2YWxfYWN0aW9uc190IGludGVyZmFjZV9hY3Rp
b25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbWF4RXhwb25lbnRzID0gcGFyYW1fbWF4RXhw
b25lbnRzOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbiA9IHBhcmFtX247CglpbnRlcmZhY2Vf
YWN0aW9ucy5wYXJhbV94ID0gcGFyYW1feDsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFtX2Nv
bnN0YW50cyA9IGluc3RyZWFtX2NvbnN0YW50czsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFt
X2V4cG9uZW50cyA9IGluc3RyZWFtX2V4cG9uZW50czsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0
cmVhbV9yZXN1bHQgPSBvdXRzdHJlYW1fcmVzdWx0OwoJKHZvaWQpIHB0aHJlYWRfb25jZSgmc2xp
Y19ic19pc19pbml0aWFsaXNlZCwgUG9seUV2YWxfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChz
dG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQgKCpj
Yl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7Cglt
YXhfYWN0aW9uc190ICphY3Rpb25zID0gUG9seUV2YWxfY29udmVydF9pbnRlcm5hbChzdG9yZWRf
bWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hF
Q0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92
YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCUNIRUNL
X0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNi
X2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3RvcmVkX2VuZ2luZSwg
YWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihzdG9y
ZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVu
LCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9u
cywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9p
ZCBQb2x5RXZhbF9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVBvbHlFdmFsX2FjdGlvbnNf
dCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gUG9seUV2YWxfcnVuX25v
bmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFi
bGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpQb2x5
RXZhbF9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCVBvbHlFdmFsX2FjdGlv
bnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5n
aW5lX2dldF9tYXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxM
OwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25z
ID0gUG9seUV2YWxfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywg
MSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBi
dWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJP
UlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5V
TEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2Ug
ewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1
bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMi
LCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoq
CiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50
ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4K
ICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgog
KiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdy
b3VwLgogKi8Kdm9pZCBQb2x5RXZhbF9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBQb2x5
RXZhbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IFBv
bHlFdmFsX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsK
fQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcg
ZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUg
dGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBn
cm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVz
dCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhf
bm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6
CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1v
cmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICog
XHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4g
QSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwg
aW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAqUG9seUV2YWxfcnVuX2dyb3VwX25vbmJs
b2NrKG1heF9ncm91cF90ICpncm91cCwgUG9seUV2YWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3Jv
dXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFBvbHlFdmFsX2NvbnZlcnRfaW50ZXJuYWwo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9
PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJu
IE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5f
Z3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25z
KTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0
aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtp
bl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luLG91
dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKgogKiBS
dW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMuICBUaGUgbGVu
Z3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJy
YXkuCiAqLwp2b2lkIFBvbHlFdmFsX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXks
IFBvbHlFdmFsX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpy
dW4gPSBQb2x5RXZhbF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rp
b25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93
YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9u
LWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAq
IFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5n
aW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2Vf
YWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9m
IHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93
YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQg
YXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdh
cnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFj
ZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRs
ZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNl
IG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpQb2x5RXZhbF9ydW5fYXJyYXlfbm9uYmxvY2sobWF4
X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBQb2x5RXZhbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rp
b25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxl
KGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2Fj
dGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5V
TEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVu
Z2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkg
PCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBQb2x5
RXZhbF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBO
VUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0
aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMp
OwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBh
Y3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4
X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFy
cmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYg
Q29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMt
aW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBh
biBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRo
ZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxl
IHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1z
cGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2Ug
YWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25z
X3QqIFBvbHlFdmFsX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgUG9seUV2YWxfYWN0aW9u
c190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIFBvbHlFdmFsX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwpOwp9CgojdW5kZWYg
Q0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 17, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleEvalKernel, 28, "SquashFactor", 0.0)
#endif

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 4, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 32, "SquashFactor", 0.0)
#endif

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 21, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 22, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolySimpleSumKernel, 33, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302d0214110c0d0ae1e9a988a3f8563588593d5710ca92d602150092cd682c8b995494809e59f5bdd0990a468a11e1")
#endif

