#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2016
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        1
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46754
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2016-06-10"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "PolyEval"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/PolyEval_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20170130
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 39)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "PolyEvalKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(PolyEvalKernel, Kernel)
MANAGER_NODE(summands, PCIe_From_Host)
MANAGER_NODE(result, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(PolyEvalKernel, summands, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(PolyEvalKernel, result, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(summands, summands, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(result, result, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(summands, summands, Stream_8, input, 128)
MANAGER_STREAM(PolyEvalKernel, result, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, result, result, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, PolyEvalKernel, summands, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(PolyEvalKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(summands, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(result, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(PolyEvalKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(PolyEvalKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(PolyEvalKernel, PolyEvalKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(PolyEvalKernel, summands, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(PolyEvalKernel, result, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(summands, PCIePushSourceSyncMax4, "summands")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(PolyEvalKernel, PolyEvalKernel, "PolyEvalKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(result, PCIePushSinkSyncMax3, "result")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 39)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "4d1e2fc63bd6c73fadbf3089200d32ae45db625c77a6461d0863a172599dee2d")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(PolyEvalKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(summands, STREAM_FROM_HOST, 0)
PCIE_STREAM(result, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(PolyEvalKernel.n, 0x0, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(PolyEvalKernel.io_summands_force_disabled, 0x4, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.io_result_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(PolyEvalKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(PolyEvalKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(1))
REG(PolyEvalKernel.dbg_ctld_done, 0x13, 1, hwBits(1))
REG(PolyEvalKernel.dbg_ctld_empty, 0x14, 1, hwBits(1))
REG(PolyEvalKernel.dbg_ctld_read, 0x15, 1, hwBits(1))
REG(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3))
REG(PolyEvalKernel.dbg_ctld_request, 0x17, 1, hwBits(1))
REG(PolyEvalKernel.dbg_done_out, 0x18, 1, hwBits(1))
REG(PolyEvalKernel.dbg_fill_level, 0x19, 1, hwBits(5))
REG(PolyEvalKernel.dbg_flush_level, 0x1a, 1, hwBits(5))
REG(PolyEvalKernel.dbg_flush_start, 0x1b, 1, hwBits(1))
REG(PolyEvalKernel.dbg_flush_start_level, 0x1c, 1, hwBits(5))
REG(PolyEvalKernel.dbg_flushing, 0x1d, 1, hwBits(1))
REG(PolyEvalKernel.dbg_full_level, 0x1e, 1, hwBits(5))
REG(PolyEvalKernel.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(PolyEvalKernel.dbg_out_valid, 0x20, 1, hwBits(1))
REG(PolyEvalKernel.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(PolyEvalKernel.n, 0x0, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolyEvalKernel.io_summands_force_disabled, 0x4, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.io_result_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(PolyEvalKernel.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(PolyEvalKernel.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_almost_empty, 0x12, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_done, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_empty, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_ctld_request, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_done_out, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_fill_level, 0x19, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_level, 0x1a, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flush_start_level, 0x1c, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_flushing, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_full_level, 0x1e, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(PolyEvalKernel.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("4d1e2fc63bd6c73fadbf3089200d32ae45db625c77a6461d0863a172599dee2d")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME PolyEval
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_PolyEval_H
#define SLIC_DECLARATIONS_PolyEval_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define PolyEval_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_summands The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 */
void PolyEval(
	uint32_t param_n,
	const float *instream_summands,
	float *outstream_result);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_summands The stream should be of size (param_n * 4) bytes.
 * \param [out] outstream_result The stream should be of size (param_n * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *PolyEval_nonblock(
	uint32_t param_n,
	const float *instream_summands,
	float *outstream_result);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint32_t param_n; /**<  [in] Interface Parameter "n". */
	const float *instream_summands; /**<  [in] The stream should be of size (param_n * 4) bytes. */
	float *outstream_result; /**<  [out] The stream should be of size (param_n * 4) bytes. */
} PolyEval_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* PolyEval_init(void);

/* Error handling functions */
int PolyEval_has_errors(void);
const char* PolyEval_get_errors(void);
void PolyEval_clear_errors(void);
/* Free statically allocated maxfile data */
void PolyEval_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int PolyEval_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_PolyEval_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(PolyEvalKernel, 1, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:496)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:29)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 46, NodeConstantRawBits, "{HWOffsetFix:5, 0, UNSIGNED}\n0x10; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:505)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:32)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 6, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:505)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:32)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 0, NodeInputMappedReg, "Scalar input (n)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1116)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:28)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 35, NodeReinterpret, "<{HWOffsetFix:32, -4, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1034)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:30)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 36, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1034)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:30)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 4, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:527)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:31)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 45, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 17, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:942)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 37, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:590)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 19, NodeInputMappedReg, "Scalar input (io_result_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 21, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 41, NodeFIFO, "FIFO(15)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 7, NodeInputMappedReg, "Scalar input (io_summands_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:35)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 8, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:35)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 9, NodeInput, "Input(summands)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:630)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:35)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 44, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:37)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 38, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:602)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:37)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 15, NodeStreamOffset, "stream offset: -16", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:228)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:39)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 40, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 12, NodeConstantRawBits, "{HWFloat:8, 24}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:37)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 13, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1181)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:37)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 14, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:881)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:38)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 22, NodeOutput, "Output(result)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:705)\npolyeval.PolySimpleSumKernel.<init>(PolySimpleSumKernel.maxj:42)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:25)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 27, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 43, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 24, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 25, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 26, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 28, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 42, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 30, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 31, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 33, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 39, NodeEqInlined, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
PHOTON_NODE_DATA(PolyEvalKernel, 32, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:376)\npolyeval.PolyEvalManager.main(PolyEvalManager.maxj:30)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int PolyEval_has_errors(void)
{	return stored_has_error; }
const char* PolyEval_get_errors(void)
{	return stored_error; }
void PolyEval_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char PolyEval_use_simulation[16];
static void PolyEval_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(PolyEval_use_simulation, 16, "PolyEval_%05ld_", pid);
}
static const char *PolyEval_check_use_simulation(void)
{
	PolyEval_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = PolyEval_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int PolyEval_simulation_launch = 0;
int PolyEval_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int PolyEval_simulator_stop(void)
{
	const char *use_sim = PolyEval_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void PolyEval_static_init(void) 
{
	stored_maxfile = PolyEval_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = PolyEval_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = PolyEval_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			PolyEval_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void PolyEval_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (PolyEval_simulation_launch == 1) {
		int sim_stat = PolyEval_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		PolyEval_simulation_launch = 0;
	}
}

static int PolyEval_get_pcie_alignment(void)
{
#ifdef PolyEval_PCIE_ALIGNMENT
	return ((PolyEval_PCIE_ALIGNMENT < 1) ? 16 : PolyEval_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int PolyEval_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = PolyEval_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *PolyEval_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = PolyEval_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct PolyEval_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} PolyEval_callback_stream_t;

typedef struct PolyEval_callback_data {
	PolyEval_callback_stream_t stream[2]; 
	int count;
	int max_count;
} PolyEval_callback_data_t;

static void PolyEval_callback_internal(void *cb_data)
{
	PolyEval_callback_data_t *data = (PolyEval_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		PolyEval_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* PolyEval_convert_internal(
	max_file_t *maxfile,
	PolyEval_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	PolyEval_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(PolyEval_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function PolyEval_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &PolyEval_callback_internal;
	}

	uint32_t param_n = interface_actions->param_n;
	
	/* code for scalar PolyEvalKernel.run_cycle_count */
	uint64_t ticks_PolyEvalKernel = param_n;
	max_set_ticks(actions, "PolyEvalKernel", param_n);
	CHECK_ERRORS;
	/* end of code for scalar PolyEvalKernel.run_cycle_count*/
	
	/* code for scalar PolyEvalKernel.n */
	uint64_t inscalar_PolyEvalKernel_n = param_n;
	max_set_uint64t(actions, "PolyEvalKernel", "n", inscalar_PolyEvalKernel_n);
	CHECK_ERRORS;
	/* end of code for scalar PolyEvalKernel.n*/
	
	int64_t tmp_0 = (param_n * 4);
	
	/* code for stream summands */
	size_t instream_size_summands = tmp_0;
	if (instream_size_summands > 0) {
		const float *stream_ptr = interface_actions->instream_summands;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->instream_summands))) {
			float *aligned_instream_summands = malloc(instream_size_summands);
			if (aligned_instream_summands == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'summands'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_summands;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_summands;
			(&cb_data->stream[cb_data->count])->size        = instream_size_summands;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_summands, interface_actions->instream_summands, instream_size_summands);
			stream_ptr = aligned_instream_summands;
		}
		max_queue_input(actions, "summands", stream_ptr, instream_size_summands);
		CHECK_ERRORS;
	}
	/* end of code for stream summands */
	
	int64_t tmp_1 = (param_n * 4);
	
	/* code for stream result */
	size_t outstream_size_result = tmp_1;
	if (outstream_size_result > 0) {
		float *stream_ptr = interface_actions->outstream_result;
		if (use_callback && (1 == PolyEval_check_aligned(interface_actions->outstream_result))) {
			float *aligned_outstream_result = malloc(outstream_size_result);
			if (aligned_outstream_result == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'result'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_result;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_result;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_result;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_result;
		}
		max_queue_output(actions, "result", stream_ptr, outstream_size_result);
		CHECK_ERRORS;
	}
	/* end of code for stream result */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void PolyEval(
	uint32_t param_n,
	const float *instream_summands,
	float *outstream_result)
{
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = PolyEval_nonblock(param_n, instream_summands, outstream_result);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_nonblock(
	uint32_t param_n,
	const float *instream_summands,
	float *outstream_result)
{
	PolyEval_actions_t interface_actions;
	interface_actions.param_n = param_n;
	interface_actions.instream_summands = instream_summands;
	interface_actions.outstream_result = outstream_result;
	(void) pthread_once(&slic_bs_is_initialised, PolyEval_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void PolyEval_run(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *PolyEval_run_nonblock(
	max_engine_t *engine,
	PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void PolyEval_run_group(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_run_t *run = PolyEval_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_group_nonblock(max_group_t *group, PolyEval_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void PolyEval_run_array(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_run_t *run = PolyEval_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *PolyEval_run_array_nonblock(max_engarray_t *engarray, PolyEval_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = PolyEval_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* PolyEval_convert(max_file_t *maxfile, PolyEval_actions_t *interface_actions)
{
	return PolyEval_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(uint32_t, n, param_n)	
SLIC_SET_TICKS(PolyEvalKernel, param_n)	
SLIC_SCALAR_UINT64(PolyEvalKernel, n, param_n)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_n * 4);)	
SLIC_STREAM(summands, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_n * 4);)	
SLIC_STREAM(result, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlBvbHlFdmFsLmgiIG5hbWU9
IlBvbHlFdmFsIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9ImxvbmciIHZh
bHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJQb2x5
RXZhbCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0
ZXIgJnF1b3Q7biZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX24iIHR5cGU9
InVpbnQzMl90Ii8+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKHBh
cmFtX24gKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX3N1bW1h
bmRzIiBzaXplPSIocGFyYW1fbiAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImZsb2F0Ij48
ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJh
dG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9uICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2Fs
bD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fbiAqIDQpIj48
dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9uIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251
bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+
PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48
L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJhbV9u
ICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX3Jlc3VsdCIg
c2l6ZT0iKHBhcmFtX24gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJmbG9hdCI+PGRpbWVu
c2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBv
cGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fbiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51
bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX24gKiA0KSI+PHVzZXJQ
YXJhbSB2YWx1ZT0icGFyYW1fbiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5h
cnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVt
QmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJh
eT48L2Z1bmN0aW9uPjwvZW5naW5lbW9kZT48L21heGZpbGU+
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBQb2x5RXZhbF9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNfZXJy
b3I7IH0KY29uc3QgY2hhciogUG9seUV2YWxfZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9y
ZWRfZXJyb3I7IH0Kdm9pZCBQb2x5RXZhbF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9y
ZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9
CgpzdGF0aWMgY2hhciBQb2x5RXZhbF91c2Vfc2ltdWxhdGlvblsxNl07CnN0YXRpYyB2b2lkIFBv
bHlFdmFsX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBpZCA9ICgobG9uZykgZ2V0
cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYoUG9seUV2YWxfdXNlX3NpbXVsYXRpb24sIDE2LCAi
UG9seUV2YWxfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqUG9seUV2YWxfY2hl
Y2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJUG9seUV2YWxfZGVmX3VzZV9zaW11bGF0aW9uKCk7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdf
VVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBQb2x5
RXZhbF91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19V
U0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGlu
dCBQb2x5RXZhbF9zaW11bGF0aW9uX2xhdW5jaCA9IDA7CmludCBQb2x5RXZhbF9zaW11bGF0b3Jf
c3RhcnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gUG9s
eUV2YWxfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRm
KGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4g
JXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlw
ZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNh
dChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsK
CQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEw
MjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxh
dG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlm
IChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwg
PSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgUG9s
eUV2YWxfc2ltdWxhdG9yX3N0b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IFBvbHlF
dmFsX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50Zihi
dWZmLCAxMDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVz
IC1jIE1BWDQ4NDhBIC1TIHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAg
PSBwb3BlbihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVm
ZiwgIiA6IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0
X2Vycm9yKGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBw
aXBlX2ZwKSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBj
b21tYW5kIG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9Cglw
Y2xvc2UocGlwZV9mcCk7CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgUG9seUV2YWxfc3RhdGlj
X2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gUG9seUV2YWxfaW5pdCgpOwoJaWYgKHN0
b3JlZF9tYXhmaWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkg
ewoJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7
IHNldF9lcnJvcigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFt
YXhfb2sobWF4X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9j
b25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9S
KSkKCQltYXhfZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3Qg
dGltZW91dF9wcmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsK
CWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBQb2x5RXZhbF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJ
aWYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWlu
dCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQg
PT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkp
IHsKCQkJUG9seUV2YWxfc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9l
cnJvcigiRXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUg
c2ltdWxhdGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3Io
IkVycm9yOiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBz
ZXQgY29ycmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigi
RXJyb3I6IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlz
IHJ1bm5pbmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRf
bWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xv
YWQoc3RvcmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJy
b3JzKSkgewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJG
QUNFX0FCT1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxv
YWQgZW5naW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJv
cnQoKTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShz
dG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUp
OwoJCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2Fk
X3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgUG9seUV2
YWxfZnJlZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9h
ZChzdG9yZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRf
bWF4ZmlsZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3Rv
cmVkX21heGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJl
ZShzdG9yZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoUG9seUV2YWxf
c2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFBvbHlFdmFsX3NpbXVs
YXRvcl9zdG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYoc3RkZXJyLCAi
RXJyb3Igc3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlQb2x5RXZhbF9zaW11bGF0aW9uX2xh
dW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgUG9seUV2YWxfZ2V0X3BjaWVfYWxpZ25tZW50KHZv
aWQpCnsKI2lmZGVmIFBvbHlFdmFsX1BDSUVfQUxJR05NRU5UCglyZXR1cm4gKChQb2x5RXZhbF9Q
Q0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBQb2x5RXZhbF9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNl
CglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQo
Y29uc3Qgdm9pZCAqZGF0YSkKewoJdWludHB0cl90IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRh
OwoJaW50IGFsaWdubWVudCA9IFBvbHlFdmFsX2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJu
IChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9CgpzdGF0aWMgdm9pZCAqUG9seUV2YWxf
bWFsbG9jX2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGln
bm1lbnQgPSBQb2x5RXZhbF9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZw
dHIsIGFsaWdubWVudCwgc2l6ZSk7CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAt
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoK
CiNkZWZpbmUgQ0hFQ0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykp
IHsgaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJP
UlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2Uo
U1QtPmVycm9ycykpOyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3Ry
YWNlKFNULT5lcnJvcnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVF
LCBNRVNTQUdFLCBSRVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jv
b2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRm
KHN0ZGVyciwgIiVzXG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVk
X2Vycm9yLCBNRVNTQUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBS
RVQ7IH0KCiAKdHlwZWRlZiBzdHJ1Y3QgUG9seUV2YWxfY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4
X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50
ICAgICAgaXNfb3V0cHV0Owp9IFBvbHlFdmFsX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBz
dHJ1Y3QgUG9seUV2YWxfY2FsbGJhY2tfZGF0YSB7CglQb2x5RXZhbF9jYWxsYmFja19zdHJlYW1f
dCBzdHJlYW1bMl07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBQb2x5RXZhbF9jYWxs
YmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBQb2x5RXZhbF9jYWxsYmFja19pbnRlcm5hbCh2b2lk
ICpjYl9kYXRhKQp7CglQb2x5RXZhbF9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoUG9seUV2YWxf
Y2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNv
dW50IDsgaSsrICkgewoJCVBvbHlFdmFsX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0
cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5
KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxp
Z25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3QqIFBvbHlF
dmFsX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJUG9seUV2YWxfYWN0
aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQg
KCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9h
Y3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYo
YWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFt
YXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190
cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJUG9seUV2YWxfY2FsbGJh
Y2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJhY2sgPSAoY2FsbGJhY2tf
ZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsKCWlmICh1c2VfY2FsbGJh
Y2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihQb2x5RXZhbF9jYWxsYmFja19kYXRhX3Qp
KTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRv
IGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gUG9s
eUV2YWxfY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRh
LT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2Rh
dGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmUG9seUV2YWxfY2FsbGJh
Y2tfaW50ZXJuYWw7Cgl9CgoJdWludDMyX3QgcGFyYW1fbiA9IGludGVyZmFjZV9hY3Rpb25zLT5w
YXJhbV9uOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgUG9seUV2YWxLZXJuZWwucnVuX2N5Y2xlX2Nv
dW50ICovCgl1aW50NjRfdCB0aWNrc19Qb2x5RXZhbEtlcm5lbCA9IHBhcmFtX247CgltYXhfc2V0
X3RpY2tzKGFjdGlvbnMsICJQb2x5RXZhbEtlcm5lbCIsIHBhcmFtX24pOwoJQ0hFQ0tfRVJST1JT
OwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBQb2x5RXZhbEtlcm5lbC5ydW5fY3ljbGVfY291
bnQqLwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgUG9seUV2YWxLZXJuZWwubiAqLwoJdWludDY0X3Qg
aW5zY2FsYXJfUG9seUV2YWxLZXJuZWxfbiA9IHBhcmFtX247CgltYXhfc2V0X3VpbnQ2NHQoYWN0
aW9ucywgIlBvbHlFdmFsS2VybmVsIiwgIm4iLCBpbnNjYWxhcl9Qb2x5RXZhbEtlcm5lbF9uKTsK
CUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgUG9seUV2YWxLZXJuZWwu
biovCgkKCWludDY0X3QgdG1wXzAgPSAocGFyYW1fbiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJl
YW0gc3VtbWFuZHMgKi8KCXNpemVfdCBpbnN0cmVhbV9zaXplX3N1bW1hbmRzID0gdG1wXzA7Cglp
ZiAoaW5zdHJlYW1fc2l6ZV9zdW1tYW5kcyA+IDApIHsKCQljb25zdCBmbG9hdCAqc3RyZWFtX3B0
ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9zdW1tYW5kczsKCQlpZiAodXNlX2NhbGxi
YWNrICYmICgxID09IFBvbHlFdmFsX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmlu
c3RyZWFtX3N1bW1hbmRzKSkpIHsKCQkJZmxvYXQgKmFsaWduZWRfaW5zdHJlYW1fc3VtbWFuZHMg
PSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9zdW1tYW5kcyk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFt
X3N1bW1hbmRzID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5l
cnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWdu
ZWQgbWVtb3J5IGZvciBzdHJlYW0gJ3N1bW1hbmRzJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9
CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVp
bnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fc3VtbWFuZHM7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGln
bmVkX2luc3RyZWFtX3N1bW1hbmRzOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfc3VtbWFuZHM7CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291
bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1fc3VtbWFuZHMsIGludGVyZmFjZV9h
Y3Rpb25zLT5pbnN0cmVhbV9zdW1tYW5kcywgaW5zdHJlYW1fc2l6ZV9zdW1tYW5kcyk7CgkJCXN0
cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3N1bW1hbmRzOwoJCX0KCQltYXhfcXVldWVfaW5w
dXQoYWN0aW9ucywgInN1bW1hbmRzIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9zdW1tYW5k
cyk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBzdW1tYW5k
cyAqLwoJCglpbnQ2NF90IHRtcF8xID0gKHBhcmFtX24gKiA0KTsKCQoJLyogY29kZSBmb3Igc3Ry
ZWFtIHJlc3VsdCAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3Jlc3VsdCA9IHRtcF8xOwoJaWYg
KG91dHN0cmVhbV9zaXplX3Jlc3VsdCA+IDApIHsKCQlmbG9hdCAqc3RyZWFtX3B0ciA9IGludGVy
ZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0OwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEg
PT0gUG9seUV2YWxfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3Jl
c3VsdCkpKSB7CgkJCWZsb2F0ICphbGlnbmVkX291dHN0cmVhbV9yZXN1bHQgPSBtYWxsb2Mob3V0
c3RyZWFtX3NpemVfcmVzdWx0KTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX3Jlc3VsdCA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICdyZXN1bHQnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFj
ZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmVzdWx0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fcmVz
dWx0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9
IG91dHN0cmVhbV9zaXplX3Jlc3VsdDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291
bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1f
cHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fcmVzdWx0OwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFj
dGlvbnMsICJyZXN1bHQiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV9yZXN1bHQpOwoJCUNI
RUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gcmVzdWx0ICovCgkKCWlm
ICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRh
ID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJl
dHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgUG9seUV2YWwoCgl1aW50
MzJfdCBwYXJhbV9uLAoJY29uc3QgZmxvYXQgKmluc3RyZWFtX3N1bW1hbmRzLAoJZmxvYXQgKm91
dHN0cmVhbV9yZXN1bHQpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlh
bGlzZWQsIFBvbHlFdmFsX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUs
ICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gUG9seUV2YWxf
bm9uYmxvY2socGFyYW1fbiwgaW5zdHJlYW1fc3VtbWFuZHMsIG91dHN0cmVhbV9yZXN1bHQpOwoJ
Q0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVu
KTsKfQoKbWF4X3J1bl90ICpQb2x5RXZhbF9ub25ibG9jaygKCXVpbnQzMl90IHBhcmFtX24sCglj
b25zdCBmbG9hdCAqaW5zdHJlYW1fc3VtbWFuZHMsCglmbG9hdCAqb3V0c3RyZWFtX3Jlc3VsdCkK
ewoJUG9seUV2YWxfYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fbiA9IHBhcmFtX247CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9zdW1tYW5k
cyA9IGluc3RyZWFtX3N1bW1hbmRzOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX3Jlc3Vs
dCA9IG91dHN0cmVhbV9yZXN1bHQ7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2lu
aXRpYWxpc2VkLCBQb2x5RXZhbF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhm
aWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZv
aWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBQb2x5RXZhbF9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxlLCAm
aW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFj
dGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFj
dGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NU
KHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBO
VUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25zKTsK
CX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdpbmUs
IGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUg
dG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsK
CW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIFBvbHlFdmFs
X3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJUG9seUV2YWxfYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBQb2x5RXZhbF9ydW5fbm9uYmxvY2soZW5n
aW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4g
YWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKlBvbHlFdmFsX3J1bl9u
b25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJUG9seUV2YWxfYWN0aW9uc190ICppbnRl
cmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21h
eF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAq
Y2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBQb2x5RXZh
bF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVu
YywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rp
b25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1
biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0g
bWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0
YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJ
bWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVm
IEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2Rl
ZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0g
W2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUg
YWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2
b2lkIFBvbHlFdmFsX3J1bl9ncm91cChtYXhfZ3JvdXBfdCAqZ3JvdXAsIFBvbHlFdmFsX2FjdGlv
bnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gUG9seUV2YWxfcnVu
X2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAq
IFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9u
cyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCBy
ZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNr
ZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMg
cHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRo
ZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5h
dGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBv
biB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9m
IGVycm9yLgogKi8KbWF4X3J1bl90ICpQb2x5RXZhbF9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dy
b3VwX3QgKmdyb3VwLCBQb2x5RXZhbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7CgltYXhf
YWN0aW9uc190ICphY3Rpb25zID0gUG9seUV2YWxfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBp
bnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJl
dHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1h
eF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25i
bG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJu
IHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlv
biBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJh
eSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZh
Y2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJy
YXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50
ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZv
aWQgUG9seUV2YWxfcnVuX2FycmF5KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgUG9seUV2YWxf
YWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IFBvbHlF
dmFsX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hF
Q0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsK
fQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcg
ZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUg
dG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQg
cmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11
c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBj
YW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5v
dGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVk
IG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBh
cnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMg
VGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBl
eGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3Iu
CiAqLwptYXhfcnVuX3QgKlBvbHlFdmFsX3J1bl9hcnJheV9ub25ibG9jayhtYXhfZW5nYXJyYXlf
dCAqZW5nYXJyYXksIFBvbHlFdmFsX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJ
bWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXks
IDApOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5p
dChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7CglpZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJu
IE5VTEw7CgltYXhfYWN0aW9uc190ICoqYXJyX2FjdGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNp
emUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5
LT5zaXplOyBpKysgKSB7CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IFBvbHlFdmFsX2NvbnZl
cnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwp
OwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0g
YWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhf
cnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsK
CWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19m
cmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJl
ZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBh
IHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2Ug
bWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFs
IHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBp
bnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgog
KiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFj
dGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRv
IHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogUG9seUV2
YWxfY29udmVydChtYXhfZmlsZV90ICptYXhmaWxlLCBQb2x5RXZhbF9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4gUG9seUV2YWxfY29udmVydF9pbnRlcm5hbChtYXhmaWxl
LCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJP
UlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 21, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(PolyEvalKernel, 32, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02144b319f7c93f92846145147330b5b2be7fc0eaebb021460bceefae690f943ed4b20303e5a63cc2164faf0")
#endif

