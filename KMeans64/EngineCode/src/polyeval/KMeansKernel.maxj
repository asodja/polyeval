package polyeval;

import static com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType.newInstance;
import static maxpower.kernel.utils.VectorUtils.rowsToColumns;
import static polyeval.PolyEvalManager.DIMENSION;

import java.util.List;

import maxpower.kernel.arithmetic.FloatingPointMultiAdder;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class KMeansKernel extends Kernel {

    static final DFEType FLOAT = dfeFloat(8, 24);

    static final DFEType UINT_32 = dfeUInt(32);

    static final DFEType UINT_64 = dfeUInt(64);

    static final String CENTER_KEY = "centers";

    static final String SQ_DIST_KEY = "sqDsts";

    private final DFEStructType structType;

    private final int xsPerTick;

	KMeansKernel(KernelParameters parameters,
			int latency,
			int maxCenterPointsInMem,
			int xsPerTick) {
        super(parameters);

        this.xsPerTick = xsPerTick;
        DFEFix addressType = dfeUInt(MathUtils.bitsToAddress(maxCenterPointsInMem));
        DFEVectorType<DFEVar> uint64Vec = new DFEVectorType<DFEVar>(UINT_64, xsPerTick);
        DFEVectorType<DFEVar> distanceVec = new DFEVectorType<DFEVar>(FLOAT, xsPerTick);
        DFEVectorType<DFEVar> pointType = new DFEVectorType<DFEVar>(FLOAT, DIMENSION);
        DFEVectorType<DFEVector<DFEVar>> pointVec = new DFEVectorType<DFEVector<DFEVar>>(pointType, xsPerTick);
        this.structType = new DFEStructType(
        		DFEStructType.sft(CENTER_KEY, uint64Vec),
        		DFEStructType.sft(SQ_DIST_KEY, distanceVec)
        );

        // Input
        // n is length of polynomial, m is number of xs
        DFEVar n = io.scalarInput("n", UINT_64);
        DFEVar m = io.scalarInput("m", UINT_64);
        DFEVar maxCount = m + xsPerTick;

        // We calculate polynomial values first for first "fragments" points,
        // then for next "fragments" points etc. Polynomial is saved in fmem
        // but points cycle in loop with offset of "fragments"
        CounterChain chain = control.count.makeCounterChain();
        DFEVar fragmentIndex = chain.addCounter(m, 1);
        DFEVar centerIndex = chain.addCounter(n, 1);
        DFEVar pointIndex = chain.addCounter(latency, 1);
        DFEVar isFirstCenter = centerIndex === 0;
        DFEVar isLastCenter = centerIndex === (n - 1);
        DFEVar isFirstFragment = fragmentIndex === 0;
        DFEVar isFirstPoint = pointIndex === 0;
        Counter readXCounter = getReadXCounter(isFirstCenter, xsPerTick, maxCount);
        DFEVar nReadXs = readXCounter.getCount();
        DFEVar isXAvailable = nReadXs < m;

        // Read input
        DFEVector<DFEVector<DFEVar>> pIn = io.input("points", pointVec, isFirstCenter & isXAvailable);
        DFEVector<DFEVar> cIn = io.input("centers", pointType, isFirstFragment & isFirstPoint);
        Memory<DFEVector<DFEVar>> cMemory = mem.alloc(pointType, maxCenterPointsInMem);
        cMemory.write(centerIndex.cast(addressType), cIn, isFirstFragment & isFirstPoint);
        // In first loop we save center into fmem
        DFEVector<DFEVar> center = isFirstFragment ? cIn : cMemory.read(centerIndex.cast(addressType));

        // Loop
        DFEStruct closestCenters = structType.newInstance(this);
        DFEVector<DFEVector<DFEVar>> loopPoints = pointVec.newInstance(this);
        DFEVector<DFEVector<DFEVar>> points = isFirstCenter ? pIn : loopPoints;
        DFEVector<DFEVector<DFEVar>> difference = points - center;
        DFEVector<DFEVector<DFEVar>> squares = difference * difference;
        List<DFEVector<DFEVar>> squaresAsList = rowsToColumns(squares).getElementsAsList();
        DFEVector<DFEVar> sqDistances = FloatingPointMultiAdder.add(squaresAsList);
        DFEStruct closest = findClosest(closestCenters, sqDistances, centerIndex);
        loopPoints <== stream.offset(points, -latency);
        closestCenters <== stream.offset(closest, -latency);


        // Output
        DFEVector<DFEVar> closestIndexes = closest.get(CENTER_KEY);
        // DFEVector<DFEVar> closestDis = closest.get(SQ_DIST_KEY);
        io.output("result", closestIndexes, uint64Vec, isLastCenter);
        // io.output("result_min", closestDis, distanceVec, isLastCenter);
    }

	private DFEStruct findClosest(DFEStruct oldDistance, DFEVector<DFEVar> newSqDistances, DFEVar centerIndex) {
		DFEVar[] updatedSqDistance = new DFEVar[xsPerTick];
		DFEVar[] updatedCenterIndexes = new DFEVar[xsPerTick];
		DFEVector<DFEVar> oldSqDistances = oldDistance.get(SQ_DIST_KEY);
		DFEVector<DFEVar> oldCenters = oldDistance.get(CENTER_KEY);
		DFEVar isFirstCenter = centerIndex === 0;
		for (int i = 0; i < xsPerTick; i++) {
			DFEVar isCloser = isFirstCenter | newSqDistances[i] < oldSqDistances[i];
			updatedSqDistance[i] = isCloser ? newSqDistances[i] : oldSqDistances[i];
			updatedCenterIndexes[i] = isCloser ? centerIndex : oldCenters[i];
		}
		return buildStruct(newInstance(updatedCenterIndexes), newInstance(updatedSqDistance));
	}

	private DFEStruct buildStruct(DFEVector<DFEVar> centers, DFEVector<DFEVar> sqDistances) {
		DFEStruct struct = structType.newInstance(this);
		struct.set(CENTER_KEY, centers);
		struct.set(SQ_DIST_KEY, sqDistances);
		return struct;
	}

    private Counter getReadXCounter(DFEVar enable, int xsPerTick, DFEVar max) {
    	return control.count.makeCounter(control.count.makeParams(64)
    			.withEnable(enable)
    			.withMax(max)
    			.withInc(xsPerTick)
    			.withWrapMode(WrapMode.STOP_AT_MAX));
    }

}
