/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 1      Name: Moving Average Simple
 * MaxFile name: MovingAverageSimple
 * Summary:
 * 	Computes a three point moving average over the input stream
 */
package polyeval;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class PolySimpleSumKernel extends PolyKernel {

	final DFEType scalarType = dfeFloat(8, 24);

	PolySimpleSumKernel(KernelParameters parameters) {
		super(parameters);

        // Counters
        OffsetExpr loopExpr = stream.makeOffsetAutoLoop("loopExpr");
        DFEVar loopLength = loopExpr.getDFEVar(this, dfeUInt(8));
        CounterChain chain = control.count.makeCounterChain();
        DFEVar inputIndex = chain.addCounter(8, 1);
        DFEVar loopIndex = chain.addCounter(loopLength, 1);

        // Input
        DFEVar input = io.input("input", scalarType, loopIndex === 0);
        DFEVar carriedSum = scalarType.newInstance(this);
        DFEVar sum = (inputIndex === 0) ? 0.0 : carriedSum;
        sum = input + sum;
        carriedSum <== stream.offset(sum, -loopExpr);

        // Output
        io.output("output", sum, scalarType, loopIndex === loopLength - 1);

	}

	@Override
	public EngineInterface getEngineInterface() {
		EngineInterface ei = new EngineInterface();

		InterfaceParam length = ei.addParam("length", CPUTypes.INT);
		InterfaceParam lengthInBytes = length * CPUTypes.FLOAT.sizeInBytes();
		InterfaceParam loopLength = ei.getAutoLoopOffset(getName(), "loopExpr");
		ei.ignoreAutoLoopOffset(getName(), "loopExpr");

		ei.setTicks(getName(), length * loopLength);

		ei.setStream("input", CPUTypes.FLOAT, lengthInBytes);
		ei.setStream("output", CPUTypes.FLOAT, lengthInBytes);
		return ei;
	}
}
