/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 1      Name: Moving Average Simple
 * MaxFile name: MovingAverageSimple
 * Summary:
 * 	Computes a three point moving average over the input stream
 */
package polyeval;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class PolySimpleSumKernel extends PolyKernel {

    static final DFEType scalarType = dfeFloat(8, 24);

    static final int FRAGMENTATION = 16;

    PolySimpleSumKernel(KernelParameters parameters) {
        super(parameters);

        // Counters
        DFEVar n = io.scalarInput("n", dfeUInt(32));
        CounterChain chain = control.count.makeCounterChain();
        DFEVar fragments = n / FRAGMENTATION;
        DFEVar inputIndex = chain.addCounter(fragments, 1);
        chain.addCounter(FRAGMENTATION, 1);

        // Input
        DFEVar summand = io.input("summands", scalarType);
        DFEVar carriedSum = scalarType.newInstance(this);
        DFEVar sum = (inputIndex === 0) ? 0.0 : carriedSum;
        sum = summand + sum;
        carriedSum <== stream.offset(sum, -FRAGMENTATION);

        // Output
        io.output("result", sum, scalarType, inputIndex === fragments - 1);

    }

    @Override
    public EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam n = ei.addParam("n", CPUTypes.UINT32);
        ei.setScalar(getName(), "n", n);
        ei.setStream("summands", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setTicks(getName(), n);

        return ei;
    }
}
