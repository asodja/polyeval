package polyeval;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class PolyEvalMultipleManager extends CustomManager {

    public PolyEvalMultipleManager(EngineParameters engineParams) {
        super(engineParams);
        KernelBlock exponentsKernel = addKernel(new PolySimpleEvalKernel(makeKernelParameters("PolySimpleEvalKernel")));
        KernelBlock multiplyKernel = addKernel(new PolyEvalKernel(makeKernelParameters("PolyEvalKernel")));
        KernelBlock sumKernel = addKernel(new PolySimpleSumKernel(makeKernelParameters("PolySimpleSumKernel")));

        // Stream from CPU
        DFELink constants = addStreamFromCPU("constants");
        DFELink exponents = addStreamFromCPU("exponents");

        // Set second kernel inputs
        multiplyKernel.getInput("exponentValues") <== exponentsKernel.getOutput("result");
        multiplyKernel.getInput("constants") <== constants;
        multiplyKernel.getInput("exponents") <== exponents;

        // Set third kernel inputs
        sumKernel.getInput("summands") <== multiplyKernel.getOutput("result");

        // Output to CPU
        addStreamToCPU("result") <== sumKernel.getOutput("result");
    }

    private static EngineInterface getEngineInterface() {
        EngineInterface ei = new EngineInterface();

        InterfaceParam maxExponents = ei.addParam("maxExponents", CPUTypes.UINT32);
        InterfaceParam x = ei.addParam("x", CPUTypes.FLOAT);
        InterfaceParam n = ei.addParam("n", CPUTypes.INT32);

        ei.setScalar("PolySimpleEvalKernel", "maxExponents", maxExponents);
        ei.setScalar("PolySimpleEvalKernel", "x", x);
        ei.setStream("constants", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());
        ei.setStream("exponents", CPUTypes.INT32, n * CPUTypes.INT32.sizeInBytes());
        ei.setStream("result", CPUTypes.FLOAT, n * CPUTypes.FLOAT.sizeInBytes());

        // Set ticks
        // Kernel 1
        InterfaceParam loopOffset = ei.getAutoLoopOffset("PolySimpleEvalKernel", "loop");
        ei.ignoreAutoLoopOffset("PolySimpleEvalKernel", "loop");
        ei.setTicks("PolySimpleEvalKernel", maxExponents * loopOffset);

        // Kernel 2
        ei.setTicks("PolyEvalKernel", n);

        // Kernel 3
        loopOffset = ei.getAutoLoopOffset("PolySimpleSumKernel", "loop");
        ei.ignoreAutoLoopOffset("PolySimpleSumKernel", "loop");
        ei.setTicks("PolySimpleSumKernel", n * loopOffset);
        return ei;
    }

    public static void main(String[] args) {
        EngineParameters params = new EngineParameters(args);
        PolyEvalMultipleManager manager = new PolyEvalMultipleManager(params);
        manager.createSLiCinterface(getEngineInterface());
        manager.build();
    }

}
